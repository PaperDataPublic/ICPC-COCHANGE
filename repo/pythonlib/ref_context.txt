[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
36228537
=================
616645
count:1
  implementing write(), close(), flush() methods.

So:

- redirect plain Python stderr/stdout
- handle subprocess stuff 

See

- https://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python
- https://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-and-or-cmd-exes-output-from-a-python-script
- https://www.python.org/dev/peps/pep-0343/

- https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python
- https://eli.thegreenplace.net/2015/redirecting-all-kinds-of-stdout-in-python/ 

- https://stackoverflow.com/questions/2996887/how-to-replicate-tee-behavior-in-python-when-using-subprocess

- https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal/4985080#4985080

=================
24931
count:1

So:

- redirect plain Python stderr/stdout
- handle subprocess stuff 

See

- https://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python
- https://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-and-or-cmd-exes-output-from-a-python-script
- https://www.python.org/dev/peps/pep-0343/

- https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python
- https://eli.thegreenplace.net/2015/redirecting-all-kinds-of-stdout-in-python/ 

- https://stackoverflow.com/questions/2996887/how-to-replicate-tee-behavior-in-python-when-using-subprocess

- https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal/4985080#4985080

"""  # noqa
=================
4675728
count:1
- redirect plain Python stderr/stdout
- handle subprocess stuff 

See

- https://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python
- https://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-and-or-cmd-exes-output-from-a-python-script
- https://www.python.org/dev/peps/pep-0343/

- https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python
- https://eli.thegreenplace.net/2015/redirecting-all-kinds-of-stdout-in-python/ 

- https://stackoverflow.com/questions/2996887/how-to-replicate-tee-behavior-in-python-when-using-subprocess

- https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal/4985080#4985080

"""  # noqa

from contextlib import contextmanager
from io import TextIOWrapper
=================
2996887
count:1
See

- https://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python
- https://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-and-or-cmd-exes-output-from-a-python-script
- https://www.python.org/dev/peps/pep-0343/

- https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python
- https://eli.thegreenplace.net/2015/redirecting-all-kinds-of-stdout-in-python/ 

- https://stackoverflow.com/questions/2996887/how-to-replicate-tee-behavior-in-python-when-using-subprocess

- https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal/4985080#4985080

"""  # noqa

from contextlib import contextmanager
from io import TextIOWrapper
import logging
import os
from subprocess import PIPE, Popen
=================
4985080
count:1
- https://stackoverflow.com/questions/616645/how-do-i-duplicate-sys-stdout-to-a-log-file-in-python
- https://stackoverflow.com/questions/24931/how-to-capture-python-interpreters-and-or-cmd-exes-output-from-a-python-script
- https://www.python.org/dev/peps/pep-0343/

- https://stackoverflow.com/questions/4675728/redirect-stdout-to-a-file-in-python
- https://eli.thegreenplace.net/2015/redirecting-all-kinds-of-stdout-in-python/ 

- https://stackoverflow.com/questions/2996887/how-to-replicate-tee-behavior-in-python-when-using-subprocess

- https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal/4985080#4985080

"""  # noqa

from contextlib import contextmanager
from io import TextIOWrapper
import logging
import os
from subprocess import PIPE, Popen
import sys
from threading import Thread
=================
4984428
count:1
    r"""
    Print the file-like object ``infile`` to the file-like object(s) ``files``
    in a separate thread.
    
    Starts and returns that thread.
    
    The type (text, binary) must MATCH across all files.

    From 
    https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal

    A note on text versus binary IO:

    TEXT files include:
    
    - files opened in text mode (``"r"``, ``"rt"``, ``"w"``, ``"wt"``)
    - ``sys.stdin``, ``sys.stdout``
    - ``io.StringIO()``; see
      https://docs.python.org/3/glossary.html#term-text-file

=================
4984428
count:1
    """
    Runs a command and captures its output via :func:`tee` to one or more 
    destinations. The output is always captured (otherwise we would lose 
    control of the output and ability to ``tee`` it); if no destination is 
    specified, we add a null handler.

    We insist on ``TextIO`` output files to match ``sys.stdout`` (etc.).

    A variation on:
    https://stackoverflow.com/questions/4984428/python-subprocess-get-childrens-output-to-file-and-terminal

    Args:
        cmd_args: arguments for the command to run
        stdout_targets: file-like objects to write ``stdout`` to
        stderr_targets: file-like objects to write ``stderr`` to 
        encoding: encoding to apply to ``stdout`` and ``stderr``
        kwargs: additional arguments for :class:`subprocess.Popen`
        
    """  # noqa
    # Make a copy so we can append without damaging the original:
=================
27921629
count:1
    Use it like this:
    
    .. code-block:: python
    
        parser.add_argument(
            '--password', type=str, action=PasswordPromptAction,
            help="MySQL password")
     
    Modified from
    http://stackoverflow.com/questions/27921629/python-using-getpass-with-argparse 
    """  # noqa
    # noinspection PyShadowingBuiltins
    def __init__(self,
                 option_strings: List[str],
                 dest: str = None,
                 nargs: Union[int, str] = "?",  # 0 or 1
                 default: Any = None,
                 required: bool = False,
                 type: Callable[[str], Any] = None,
                 metavar: str = None,
=================
538666
count:1

        'timedelta',        # treats input as a datetime.timedelta
        's', 'seconds',
        'm', 'minutes',
        'h', 'hours',
        'd', 'days',
        'w', 'weeks'

    Modified from
    https://stackoverflow.com/questions/538666/python-format-timedelta-to-string
    """  # noqa

    # Convert tdelta to integer seconds.
    if inputtype == 'timedelta':
        remainder = int(tdelta.total_seconds())
    elif inputtype in ['s', 'seconds']:
        remainder = int(tdelta)
    elif inputtype in ['m', 'minutes']:
        remainder = int(tdelta) * 60
    elif inputtype in ['h', 'hours']:
=================
787287
count:1
    except ImportError:
        Figure = None


# =============================================================================
# Image embedding in PDFs
# =============================================================================
# xhtml2pdf (2013-04-11) supports PNG, but not SVG.
# You can convert SVG to PNG for embedding:
# http://stackoverflow.com/questions/787287
# You could make a PDF and append it, though that would (without further
# effort) lack the patient headers.

def png_img_html_from_pyplot_figure(fig: "Figure",
                                    dpi: int = 100,
                                    extra_html_class: str = None) -> str:
    """
    Converts a ``pyplot`` figure to an HTML IMG tag with encapsulated PNG.
    """
    if fig is None:
=================
3899980
count:1
                            fontsize: Union[int, float] = 12) -> None:
    """
    Sets the current font size within the ``matplotlib`` library.

    **WARNING:** not an appropriate method for multithreaded environments, as
    it writes (indirectly) to ``matplotlib`` global objects. See CamCOPS for
    alternative methods.
    """
    font = {
        # http://stackoverflow.com/questions/3899980
        # http://matplotlib.org/users/customizing.html
        'family': 'sans-serif',
        # ... serif, sans-serif, cursive, fantasy, monospace
        'style': 'normal',  # normal (roman), italic, oblique
        'variant': 'normal',  # normal, small-caps
        'weight': 'normal',
        # ... normal [=400], bold [=700], bolder [relative to current],
        # lighter [relative], 100, 200, 300, ..., 900
        'size': fontsize  # in pt (default 12)
    }
=================
7125009
count:1
        'variant': 'normal',  # normal, small-caps
        'weight': 'normal',
        # ... normal [=400], bold [=700], bolder [relative to current],
        # lighter [relative], 100, 200, 300, ..., 900
        'size': fontsize  # in pt (default 12)
    }
    # noinspection PyUnresolvedReferences
    matplotlib.rc('font', **font)
    legend = {
        # http://stackoverflow.com/questions/7125009
        'fontsize': fontsize
    }
    # noinspection PyUnresolvedReferences
=================
952914
count:1
    Converts a list of lists into a flat list.
    
    Args:
        x: list of lists 

    Returns:
        flat list
        
    As per
    http://stackoverflow.com/questions/952914/making-a-flat-list-out-of-list-of-lists-in-python

    """  # noqa
    return [item for sublist in x for item in sublist]


def unique_list(seq: Iterable[Any]) -> List[Any]:
    """
    Returns a list of all the unique elements in the input list.

    Args:
=================
480214
count:1
    Returns a list of all the unique elements in the input list.

    Args:
        seq: input list

    Returns:
        list of unique elements

    As per
    http://stackoverflow.com/questions/480214/how-do-you-remove-duplicates-from-a-list-in-whilst-preserving-order

    """  # noqa
    seen = set()
    seen_add = seen.add
    return [x for x in seq if not (x in seen or seen_add(x))]


def chunks(x: List[Any], n: int) -> Iterable[List[Any]]:
    """
    Yield successive ``n``-sized chunks from the list ``x``.
=================
8897593
count:1
        # Arbitrarily, better to have an earlier (lower) concept ID.
        return self.concept_id < other.concept_id

    def match_tuple(self, target: "AthenaConceptRow") -> Tuple[float, float]:
        """
        Returns a score reflecting our similarity to the target.

        See

        - https://stackoverflow.com/questions/8897593/similarity-between-two-text-documents
        - https://stackoverflow.com/questions/2380394/simple-implementation-of-n-gram-tf-idf-and-cosine-similarity-in-python
        - https://spacy.io/usage/vectors-similarity -- data not included
        - https://radimrehurek.com/gensim/index.html
        - https://radimrehurek.com/gensim/tut3.html
        - https://scikit-learn.org/stable/
        - http://www.nltk.org/

        BINNED. We will use human judgement.
        """  # noqa
        self_words = set(x.lower() for x in self.concept_name.split())
=================
2380394
count:1
        return self.concept_id < other.concept_id

    def match_tuple(self, target: "AthenaConceptRow") -> Tuple[float, float]:
        """
        Returns a score reflecting our similarity to the target.

        See

        - https://stackoverflow.com/questions/8897593/similarity-between-two-text-documents
        - https://stackoverflow.com/questions/2380394/simple-implementation-of-n-gram-tf-idf-and-cosine-similarity-in-python
        - https://spacy.io/usage/vectors-similarity -- data not included
        - https://radimrehurek.com/gensim/index.html
        - https://radimrehurek.com/gensim/tut3.html
        - https://scikit-learn.org/stable/
        - http://www.nltk.org/

        BINNED. We will use human judgement.
        """  # noqa
        self_words = set(x.lower() for x in self.concept_name.split())
        other_words = set(x.lower() for x in target.concept_name.split())
=================
597476
count:1

"""

from typing import Match, Optional, Pattern


# =============================================================================
# Class to store last match of compiled regex
# =============================================================================
# Based on http://stackoverflow.com/questions/597476/how-to-concisely-cascade-through-multiple-regex-statements-in-python  # noqa

class CompiledRegexMemory(object):
    """
    Class to store last match of compiled regex.
    
    Once you have called :func:`match` or :func:`search`, the attribute
    :attr:`last_match` contains the last match, and ``group(n)`` returns the
    *n*\ th group of that last match.
    
    Based on
=================
597476
count:1
class CompiledRegexMemory(object):
    """
    Class to store last match of compiled regex.
    
    Once you have called :func:`match` or :func:`search`, the attribute
    :attr:`last_match` contains the last match, and ``group(n)`` returns the
    *n*\ th group of that last match.
    
    Based on
    http://stackoverflow.com/questions/597476/how-to-concisely-cascade-through-multiple-regex-statements-in-python.
    """  # noqa
    def __init__(self) -> None:
        self.last_match = None  # type: Optional[Match]

    def match(self, compiled_regex: Pattern, text: str) -> Match:
        self.last_match = compiled_regex.match(text)
        return self.last_match

    def search(self, compiled_regex: Pattern, text: str) -> Match:
        self.last_match = compiled_regex.search(text)
=================
4832357
count:1
        )


class XmlResponse(Response):
    """
    Response class for returning XML to the user.
    """
    def __init__(self, body: str, **kwargs) -> None:
        # application/xml versus text/xml:
        # https://stackoverflow.com/questions/4832357
        super().__init__(
            content_type=MimeType.XML,
            body=body,
            **kwargs
        )


class ZipResponse(BinaryResponse):
    """
    Response class for returning a ZIP file to the user.
=================
1395151
count:1


class ZipResponse(BinaryResponse):
    """
    Response class for returning a ZIP file to the user.
    """
    def __init__(self, body: bytes, filename: str, **kwargs) -> None:
        # For ZIP, "inline" and "attachment" dispositions are equivalent, since
        # browsers don't display ZIP files inline.
        # https://stackoverflow.com/questions/1395151
        super().__init__(
            content_type=MimeType.ZIP,
            filename=filename,
            body=body,
            **kwargs
=================
5967500
count:1

from functools import partial, total_ordering
import re
from typing import Any, List, Union


# =============================================================================
# Natural sorting, e.g. for COM ports
# =============================================================================
# http://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside  # noqa

def atoi(text: str) -> Union[int, str]:
    """
    Converts strings to integers if they're composed of digits; otherwise
    returns the strings unchanged. One way of sorting strings with numbers;
    it will mean that ``"11"`` is more than ``"2"``.
    """
    return int(text) if text.isdigit() else text


=================
5967500
count:1
    it will mean that ``"11"`` is more than ``"2"``.
    """
    return int(text) if text.isdigit() else text


def natural_keys(text: str) -> List[Union[int, str]]:
    """
    Sort key function.
    Returns text split into string/number parts, for natural sorting; as per
    http://stackoverflow.com/questions/5967500/how-to-correctly-sort-a-string-with-a-number-inside
    
    Example (as per the source above):
        
    .. code-block:: python
    
        >>> from cardinal_pythonlib.sort import natural_keys
        >>> alist=[
        ...     "something1",
        ...     "something12",
        ...     "something17",
=================
13299550
count:1
    Returns:
        The process object (which is also stored in :data:`processes`).
    """
    log.debug("{!r}", args)
    global processes
    global proc_args_list
    proc = Popen(args, stdin=stdin, stdout=stdout, stderr=stderr)
    # proc = Popen(args, stdin=None, stdout=PIPE, stderr=STDOUT)
    # proc = Popen(args, stdin=None, stdout=PIPE, stderr=PIPE)
    # Can't preserve colour: http://stackoverflow.com/questions/13299550/preserve-colored-output-from-python-os-popen  # noqa
    processes.append(proc)
    proc_args_list.append(args)
    return proc


def wait_for_processes(die_on_failure: bool = True,
                       timeout_sec: float = 1) -> None:
    """
    Wait for child processes (catalogued in :data:`processes`) to finish.

=================
16042647
count:1
    # [2] Standard WSGI as copies of standard HTTP request fields (thus,
    #     optional); http://wsgi.readthedocs.io/en/latest/definitions.html
    # [3] Also standard WSGI, but not CGI; must always be present.
    # [4] From non-standard but common HTTP request fields;
    #     https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Common_non-standard_request_fields  # noqa
    #     https://github.com/omnigroup/Apache/blob/master/httpd/modules/proxy/mod_proxy_http.c  # noqa
    # [5] Non-standard; Nginx-specific? Nonetheless, all "HTTP_" variables in
    #     WSGI should follow the HTTP request headers.
    # [6] Protocols (i.e. http versus https):
    #     https://stackoverflow.com/questions/16042647/whats-the-de-facto-standard-for-a-reverse-proxy-to-tell-the-backend-ssl-is-used  # noqa
=================
7835030
count:1
        """
        self.logger.log(self.loglevel, msg)

    def __call__(self,
                 environ: TYPE_WSGI_ENVIRON,
                 start_response: TYPE_WSGI_START_RESPONSE) \
            -> TYPE_WSGI_APP_RESULT:
        query_string = environ.get(WsgiEnvVar.QUERY_STRING, "")
        try:
            # https://stackoverflow.com/questions/7835030/obtaining-client-ip-address-from-a-wsgi-app-using-eventlet  # noqa
            # https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For  # noqa
            forwarded_for = " [forwarded for {}]".format(
                environ[WsgiEnvVar.HTTP_X_FORWARDED_FOR])
        except KeyError:
            forwarded_for = ""
        request_details = (
            '{remote}{fwd}: "{method} {path}{qmark}{query} {proto}"'.format(
                remote=environ.get(WsgiEnvVar.REMOTE_ADDR, ""),
                fwd=forwarded_for,
                method=environ.get(WsgiEnvVar.REQUEST_METHOD, ""),
=================
49547
count:1
)

log = get_brace_style_log_with_null_handler(__name__)
# log.setLevel(logging.DEBUG)


# =============================================================================
# DisableClientSideCachingMiddleware
# =============================================================================
# http://stackoverflow.com/questions/49547/making-sure-a-web-page-is-not-cached-across-all-browsers  # noqa
# http://stackoverflow.com/questions/3859097/how-to-add-http-headers-in-wsgi-middleware  # noqa

def add_never_cache_headers(headers: TYPE_WSGI_RESPONSE_HEADERS) -> None:
    """
    Adds WSGI headers to say "never cache this response".
    """
    headers.append(("Cache-Control", "no-cache, no-store, must-revalidate"))  # HTTP 1.1  # noqa
    headers.append(("Pragma", "no-cache"))  # HTTP 1.0
    headers.append(("Expires", "0"))  # Proxies

=================
3859097
count:1

log = get_brace_style_log_with_null_handler(__name__)
# log.setLevel(logging.DEBUG)


# =============================================================================
# DisableClientSideCachingMiddleware
# =============================================================================
# http://stackoverflow.com/questions/49547/making-sure-a-web-page-is-not-cached-across-all-browsers  # noqa
# http://stackoverflow.com/questions/3859097/how-to-add-http-headers-in-wsgi-middleware  # noqa

def add_never_cache_headers(headers: TYPE_WSGI_RESPONSE_HEADERS) -> None:
    """
    Adds WSGI headers to say "never cache this response".
    """
    headers.append(("Cache-Control", "no-cache, no-store, must-revalidate"))  # HTTP 1.1  # noqa
    headers.append(("Pragma", "no-cache"))  # HTTP 1.0
    headers.append(("Expires", "0"))  # Proxies


=================
16042647
count:1
        #   ... SSL Proxy requested for wombat:443 but not enabled [Hint: SSLProxyEngine]
        #   ... failed to enable ssl support for 0.0.0.0:0 (httpd-UDS)
    SSLProxyEngine on
    
    <Location /camcops>
            # (c) Allow access
        Require all granted

            # (d) Tell the proxied application that we are using HTTPS:
            # ... https://stackoverflow.com/questions/16042647
            # Enable mod_headers (e.g. "sudo a2enmod headers") and:
        RequestHeader set X-Forwarded-Proto https
        RequestHeader set X-Script-Name /camcops
    </Location>

        # ---------------------------------------------------------------------
        # 2. Serve static files
        # ---------------------------------------------------------------------
        # a) offer them at the appropriate URL
        # b) provide permission
=================
2297403
count:1

        Should we be looking at HTTP_X_FORWARDED_HOST or
        HTTP_X_FORWARDED_SERVER?
        See https://github.com/omnigroup/Apache/blob/master/httpd/modules/proxy/mod_proxy_http.c  # noqa
        ... and let's follow mod_wsgi.

        -----------------------------------------------------------------------
        HTTP_HOST versus SERVER_NAME
        -----------------------------------------------------------------------
        https://stackoverflow.com/questions/2297403/what-is-the-difference-between-http-host-and-server-name-in-php  # noqa

        -----------------------------------------------------------------------
        REWRITING THE PROTOCOL
        -----------------------------------------------------------------------
        Consider how we get here. For example, we may have this sequence:
        
        .. code-block:: none

            user's web browser
            -> Apache front-end web server via HTTPS on port 443
=================
8506897
count:1
    - This is defined in HTTP/1.1; see https://www.ietf.org/rfc/rfc2616.txt.
    - The gzip format is the most broadly supported, according to
      https://en.wikipedia.org/wiki/HTTP_compression.
    - This format is defined in https://www.ietf.org/rfc/rfc1952.txt.
    - The gzip format has a header; see above and
      https://en.wikipedia.org/wiki/Gzip.
    - Python's :func:`gzip.compress` writes to a memory file internally and
      writes the header.
    - So the work in the most popular answer here is unnecessary:
      https://stackoverflow.com/questions/8506897/how-do-i-gzip-compress-a-string-in-python
    - All we need is conversion of the string to bytes (via the appropriate
      encoding) and then :func:`gzip.compress`.
    - The requestor should also set HTTP ``Accept-Encoding`` if it wants 
      compressed data back. See RFC2616 again (as above).

    Args:
        text:
            a string to compress
        encoding:
            encoding to use when converting string to bytes prior to
=================
5649407
count:1
        "X'CDE7A24B1A9DBA3148BCB7A0B9DA5BB6A424486C'"

    Original purpose and notes:

    - SPECIAL HANDLING for BLOBs: a string like ``X'01FF'`` means a hex-encoded
      BLOB. Titanium is rubbish at BLOBs, so we encode them as special string
      literals.
    - SQLite uses this notation: https://sqlite.org/lang_expr.html
    - Strip off the start and end and convert it to a byte array:
      http://stackoverflow.com/questions/5649407
    """
    if len(s) < 3 or not s.startswith("X'") or not s.endswith("'"):
        return None
    return binascii.unhexlify(s[2:-1])


# =============================================================================
# Encoding: binary as hex in 64'...' format (which is idiosyncratic!)
# =============================================================================

=================
475074
count:1
def base64_64format_decode(s: str) -> Optional[bytes]:
    """
    Reverse :func:`base64_64format_encode`.

    Original purpose and notes:

    - THIS IS ANOTHER WAY OF DOING BLOBS: base64 encoding, e.g. a string like
      ``64'cGxlYXN1cmUu'`` is a base-64-encoded BLOB (the ``64'...'`` bit is my
      representation).
    - regex from http://stackoverflow.com/questions/475074
    - better one from http://www.perlmonks.org/?node_id=775820

    """
    if len(s) < 4 or not s.startswith("64'") or not s.endswith("'"):
        return None
=================
5228158
count:1
"""

from itertools import product
from typing import Dict, Iterable


def product_dict(**kwargs: Iterable) -> Iterable[Dict]:
    """
    See
    https://stackoverflow.com/questions/5228158/cartesian-product-of-a-dictionary-of-lists.

    Takes keyword arguments, and yields dictionaries containing every
    combination of possibilities for each keyword.

    Examples:

    .. code-block:: python

        >>> list(product_dict(a=[1, 2], b=[3, 4]))
        [{'a': 1, 'b': 3}, {'a': 1, 'b': 4}, {'a': 2, 'b': 3}, {'a': 2, 'b': 4}]
=================
33019698
count:1
        2.0 -> 2

        -1.6 -> -2
        etc.

    ... or the equivalent for a certain number of decimal places.

    Note that round() implements "banker's rounding", which is never what
    we want:
    - https://stackoverflow.com/questions/33019698/how-to-properly-round-up-half-float-numbers-in-python  # noqa
    """
    if not math.isfinite(x):
        return x
    factor = pow(10, dp)
    x = x * factor
    if x >= 0:
        x = math.floor(x + 0.5)
    else:
        x = math.ceil(x - 0.5)
    x = x / factor
=================
3410976
count:1
        return math.ceil(x - 0.5)


def round_sf(x: float, n: int = 2) -> float:
    """
    Round to a certain number of significant figures.
    
    As per http://code.activestate.com/lists/python-tutor/70739/, linked to
    from
    https://stackoverflow.com/questions/3410976/how-to-round-a-number-to-significant-figures-in-python

    Args:
        x: quantity to round
        n: number of significant figures

    Returns:
        float: x, rounded to n significant figures
        
    This does proper rounding:
    
=================
33560364
count:1
# import shlex
import subprocess
import sys
from typing import List, Union


def cmdline_split(s: str, platform: Union[int, str] = 'this') -> List[str]:
    """
    As per
    https://stackoverflow.com/questions/33560364/python-windows-parsing-command-lines-with-shlex.

    Multi-platform variant of ``shlex.split()`` for command-line splitting.
    For use with ``subprocess``, for ``argv`` injection etc. Using fast REGEX.
    
    Args:
        s:
            string to split
        platform:
            - ``'this'`` = auto from current platform;
            - ``1`` = POSIX;
=================
32404
count:1

===============================================================================

**Functions to manage Windows services.**

For an example, see ``crate_anon/tools/winservice.py``

*Details*

- http://stackoverflow.com/questions/32404
- http://www.chrisumbel.com/article/windows_services_in_python
- http://code.activestate.com/recipes/551780-win-services-helper/
- http://docs.activestate.com/activepython/2.4/pywin32/PyWin32.HTML

  - http://docs.activestate.com/activepython/2.4/pywin32/modules.html
  - source: ``...venv.../Lib/site-packages/win32/lib/win32serviceutil.py``

- http://docs.activestate.com/activepython/3.3/pywin32/servicemanager.html
- http://timgolden.me.uk/pywin32-docs/contents.html

=================
34696815
count:1
        -> win32serviceutil.HandleCommandLine()
            ... fishes things out of cls._exe_name_, etc.
        -> win32serviceutil.InstallService()
            ... builds a command line
            ... by default:
            "d:\venvs\crate\lib\site-packages\win32\PythonService.exe"
        -> win32service.CreateService()
        
  - So how, in the normal situation, does PythonService.exe find our script?
  - At this point, see also http://stackoverflow.com/questions/34696815
  - Source code is: 
    https://github.com/tjguk/pywin32/blob/master/win32/src/PythonService.cpp
    
  - Starting a service directly with PrepareToHostSingle:
  
    - https://mail.python.org/pipermail/python-win32/2008-April/007299.html
    - https://mail.python.org/pipermail/python-win32/2010-May/010487.html
      
  - SUCCESS! Method is:
    
=================
7085604
count:1

but it crashed in a print statement -- Python 2 only at present (2016-05-11,
version 0.1.1). However, its process management is instructive; it uses
"multiprocessing", not "subprocess". The multiprocessing module calls Python
functions. And its docs explicitly note that terminate() leaves descendant
processes orphaned.

See in particular

- http://stackoverflow.com/questions/7085604/sending-c-to-python-subprocess-objects-on-windows
- http://stackoverflow.com/questions/140111/sending-an-arbitrary-signal-in-windows

Python bug?

- http://bugs.python.org/issue3905
- http://bugs.python.org/issue13368

Maybe a subprocess bug. Better luck with
``ctypes.windll.kernel32.GenerateConsoleCtrlEvent``.

=================
140111
count:1
but it crashed in a print statement -- Python 2 only at present (2016-05-11,
version 0.1.1). However, its process management is instructive; it uses
"multiprocessing", not "subprocess". The multiprocessing module calls Python
functions. And its docs explicitly note that terminate() leaves descendant
processes orphaned.

See in particular

- http://stackoverflow.com/questions/7085604/sending-c-to-python-subprocess-objects-on-windows
- http://stackoverflow.com/questions/140111/sending-an-arbitrary-signal-in-windows

Python bug?

- http://bugs.python.org/issue3905
- http://bugs.python.org/issue13368

Maybe a subprocess bug. Better luck with
``ctypes.windll.kernel32.GenerateConsoleCtrlEvent``.

Current method tries a variety of things under Windows:
=================
20561990
count:1
.. code-block:: none

    CTRL-C -> CTRL-BREAK -> TASKKILL /T -> TASKKILL /T /F -> kill()
    
... which are progressively less graceful in terms of child processes getting
to clean up. Still, it works (usually at one of the two TASKKILL stages).

*"The specified service is marked for deletion"*

- http://stackoverflow.com/questions/20561990

"""  # noqa

import atexit
import ctypes
import os
import platform
import subprocess
import sys
import traceback
=================
18682681
count:1
        args = [
            "taskkill",  # built in to Windows XP and higher
            "/pid", str(self.process.pid),
            "/t",  # tree kill: kill all children
        ]
        if force:
            args.append("/f")  # forcefully
        callname = " ".join(args)
        retcode = subprocess.call(args)
        # http://stackoverflow.com/questions/18682681/what-are-exit-codes-from-the-taskkill-utility  # noqa
        # noinspection PyUnresolvedReferences
        if retcode == winerror.ERROR_SUCCESS:  # 0
            self.info("Killed with " + repr(callname))
        elif retcode == winerror.ERROR_INVALID_FUNCTION:  # 1
            self.warning(
                repr(callname) +
                " failed (error code 1 = ERROR_INVALID_FUNCTION; "
                "can mean 'Access denied', or 'This process can only be "
                "terminated forcefully (with /F option)').")
        elif retcode == winerror.ERROR_WAIT_NO_CHILDREN:  # 128
=================
1230669
count:1
        return retcode

    def _kill(self) -> None:
        """
        Hard kill.
        
        - PROBLEM: originally, via ``self.process.kill()``, could leave orphans
          under Windows.
        - SOLUTION: see
          https://stackoverflow.com/questions/1230669/subprocess-deleting-child-processes-in-windows,
          which uses ``psutil``.

        """  # noqa
        self.warning("Using a recursive hard kill; will assume it worked")
        pid = self.process.pid
        gone, still_alive = kill_proc_tree(pid, including_parent=True,
                                           timeout_s=self.kill_timeout_sec)
        self.debug("Killed: {!r}".format(gone))
        self.warning("Still alive: {!r}".format(still_alive))

=================
16333054
count:1
                Windows stop event for this service (default ``1000``)
            kill_timeout_sec: how long (in seconds) will we wait for the
                subprocesses to end peacefully, before we try to kill them?

        .. todo::
            cardinal_pythonlib.winservice.WindowsService: NOT YET IMPLEMENTED:
            Windows service autorestart
        """

        # https://stackoverflow.com/questions/16333054
        def cleanup():
            self.debug("atexit function called: cleaning up")
            for pmgr_ in self.process_managers:
                pmgr_.stop()

        atexit.register(cleanup)

        # Set up process info
        self.process_managers = []  # type: List[ProcessManager]
        n = len(procdetails)
=================
6783921
count:1
    .. code-block:: python

        import mimetypes
        mimetypes.types_map['.pdf']  # 'application/pdf'
        
    See:

    - Binary:

      - https://stackoverflow.com/questions/6783921/which-mime-type-to-use-for-a-binary-file-thats-specific-to-my-program

    - CSV
    
      - http://stackoverflow.com/questions/264256/what-is-the-best-mime-type-and-extension-to-use-when-exporting-tab-delimited
      - http://www.iana.org/assignments/media-types/text/tab-separated-values
    
    - ZIP
    
      - http://stackoverflow.com/questions/4411757/zip-mime-types-when-to-pick-which-one
      
=================
264256
count:1
        
    See:

    - Binary:

      - https://stackoverflow.com/questions/6783921/which-mime-type-to-use-for-a-binary-file-thats-specific-to-my-program

    - CSV
    
      - http://stackoverflow.com/questions/264256/what-is-the-best-mime-type-and-extension-to-use-when-exporting-tab-delimited
      - http://www.iana.org/assignments/media-types/text/tab-separated-values
    
    - ZIP
    
      - http://stackoverflow.com/questions/4411757/zip-mime-types-when-to-pick-which-one
      
    - Microsoft Office
    
      - https://filext.com/faq/office_mime_types.html
      
=================
4411757
count:1
      - https://stackoverflow.com/questions/6783921/which-mime-type-to-use-for-a-binary-file-thats-specific-to-my-program

    - CSV
    
      - http://stackoverflow.com/questions/264256/what-is-the-best-mime-type-and-extension-to-use-when-exporting-tab-delimited
      - http://www.iana.org/assignments/media-types/text/tab-separated-values
    
    - ZIP
    
      - http://stackoverflow.com/questions/4411757/zip-mime-types-when-to-pick-which-one
      
    - Microsoft Office
    
      - https://filext.com/faq/office_mime_types.html
      
    - OpenOffice
    
      - https://www.openoffice.org/framework/documentation/mimetypes/mimetypes.html
      - https://stackoverflow.com/questions/31489757/what-is-correct-mimetype-with-apache-openoffice-files-like-odt-ods-odp

=================
31489757
count:1
      - http://stackoverflow.com/questions/4411757/zip-mime-types-when-to-pick-which-one
      
    - Microsoft Office
    
      - https://filext.com/faq/office_mime_types.html
      
    - OpenOffice
    
      - https://www.openoffice.org/framework/documentation/mimetypes/mimetypes.html
      - https://stackoverflow.com/questions/31489757/what-is-correct-mimetype-with-apache-openoffice-files-like-odt-ods-odp

    """  # noqa
    BINARY = "application/octet-stream"
    CSV = "text/csv"
    DOC = "application/msword"
    DOCX = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"  # noqa
    DOT = DOC
    DOTX = "application/vnd.openxmlformats-officedocument.wordprocessingml.template"  # noqa
    FORCE_DOWNLOAD = "application/force-download"
    ODP = "application/vnd.oasis.opendocument.presentation"
=================
32214614
count:1
            horse = ()
            dog = ()
            whale = ()
        
        print(Animal.horse)
        print(Animal.horse == 'horse')
        print(Animal.horse.name, Animal.horse.value)

    See
    http://stackoverflow.com/questions/32214614/automatically-setting-an-enum-members-value-to-its-name/32215467
    and then inherit from :class:`StrEnum` rather than :class:`Enum`.

    """  # noqa
    pass


# -----------------------------------------------------------------------------
# LowerCaseAutoStrEnumMeta
# -----------------------------------------------------------------------------

=================
36932
count:1
    """
    pass


# =============================================================================
# enum: TOO OLD; NAME CLASH; DEPRECATED/REMOVED
# =============================================================================

# def enum(**enums: Any) -> Enum:
#     """Enum support, as at http://stackoverflow.com/questions/36932"""
#     return type('Enum', (), enums)


# =============================================================================
# AttrDict: DEPRECATED
# =============================================================================

class AttrDict(dict):
    """
    Dictionary with attribute access; see
=================
4984647
count:1


# =============================================================================
# AttrDict: DEPRECATED
# =============================================================================

class AttrDict(dict):
    """
    Dictionary with attribute access; see
    http://stackoverflow.com/questions/4984647
    """
    def __init__(self, *args, **kwargs) -> None:
        super(AttrDict, self).__init__(*args, **kwargs)
        self.__dict__ = self


# =============================================================================
# OrderedNamespace
# =============================================================================
# for attrdict itself: use the attrdict package
=================
455059
count:1


# =============================================================================
# OrderedNamespace
# =============================================================================
# for attrdict itself: use the attrdict package

class OrderedNamespace(object):
    """
    As per http://stackoverflow.com/questions/455059, modified for
    ``__init__``.
    """
    def __init__(self, *args):
        super().__setattr__('_odict', OrderedDict(*args))

    def __getattr__(self, key):
        odict = super().__getattribute__('_odict')
        if key in odict:
            return odict[key]
        return super().__getattribute__(key)
=================
3310584
count:1
        else:
            memfile = io.BytesIO()
            # noinspection PyUnresolvedReferences
            xhtml2pdf.document.pisaDocument(html, memfile)
            # ... returns a document, but we don't use it, so we don't store it
            # to stop pychecker complaining
            # http://xhtml2pdf.appspot.com/static/pisa-en.html
            memfile.seek(0)
            return memfile.read()
            # http://stackoverflow.com/questions/3310584

    elif processor == Processors.WEASYPRINT:

        if on_disk:
            # noinspection PyUnresolvedReferences
            return weasyprint.HTML(string=html).write_pdf(output_path)
        else:
            # http://ampad.de/blog/generating-pdfs-django/
            # noinspection PyUnresolvedReferences
            return weasyprint.HTML(string=html).write_pdf()
=================
15169101
count:1
                    wkhtmltopdf=wkhtmltopdf_filename.encode('utf-8'))
                # the bug is that pdfkit.pdfkit.PDFKit.__init__ will attempt to
                # decode the string in its configuration object;
                # https://github.com/JazzCore/python-pdfkit/issues/32
            else:
                # noinspection PyUnresolvedReferences
                config = pdfkit.configuration(wkhtmltopdf=wkhtmltopdf_filename)

        # Temporary files that a subprocess can read:
        #   http://stackoverflow.com/questions/15169101
        # wkhtmltopdf requires its HTML files to have ".html" extensions:
        #   http://stackoverflow.com/questions/5776125
        h_filename = None
        f_filename = None
        try:
            if header_html:
                h_fd, h_filename = tempfile.mkstemp(suffix='.html')
                os.write(h_fd, header_html.encode(file_encoding))
                os.close(h_fd)
                wkhtmltopdf_options["header-html"] = h_filename
=================
5776125
count:1
                # decode the string in its configuration object;
                # https://github.com/JazzCore/python-pdfkit/issues/32
            else:
                # noinspection PyUnresolvedReferences
                config = pdfkit.configuration(wkhtmltopdf=wkhtmltopdf_filename)

        # Temporary files that a subprocess can read:
        #   http://stackoverflow.com/questions/15169101
        # wkhtmltopdf requires its HTML files to have ".html" extensions:
        #   http://stackoverflow.com/questions/5776125
        h_filename = None
        f_filename = None
        try:
            if header_html:
                h_fd, h_filename = tempfile.mkstemp(suffix='.html')
                os.write(h_fd, header_html.encode(file_encoding))
                os.close(h_fd)
                wkhtmltopdf_options["header-html"] = h_filename
            if footer_html:
                f_fd, f_filename = tempfile.mkstemp(suffix='.html')
=================
312230
count:1
def serve_pdf_to_stdout(pdf: bytes) -> None:
    """
    Serves a PDF to ``stdout`` (for web servers).

    Writes a ``Content-Type: application/pdf`` header and then the PDF to
    ``stdout``.

    See:

    - http://stackoverflow.com/questions/312230/proper-mime-type-for-pdf-files
    - http://www.askapache.com/htaccess/pdf-cookies-headers-rewrites.html
    - http://stackoverflow.com/questions/2374427

    """
    # print("Content-type: text/plain\n")  # for debugging
    print("Content-Type: application/pdf\n")
    # https://stackoverflow.com/questions/908331/how-to-write-binary-data-to-stdout-in-python-3  # noqa
    sys.stdout.buffer.write(pdf)


=================
2374427
count:1
    Serves a PDF to ``stdout`` (for web servers).

    Writes a ``Content-Type: application/pdf`` header and then the PDF to
    ``stdout``.

    See:

    - http://stackoverflow.com/questions/312230/proper-mime-type-for-pdf-files
    - http://www.askapache.com/htaccess/pdf-cookies-headers-rewrites.html
    - http://stackoverflow.com/questions/2374427

    """
    # print("Content-type: text/plain\n")  # for debugging
    print("Content-Type: application/pdf\n")
    # https://stackoverflow.com/questions/908331/how-to-write-binary-data-to-stdout-in-python-3  # noqa
    sys.stdout.buffer.write(pdf)


def make_pdf_writer() -> PdfFileWriter:
    """
=================
908331
count:1
    See:

    - http://stackoverflow.com/questions/312230/proper-mime-type-for-pdf-files
    - http://www.askapache.com/htaccess/pdf-cookies-headers-rewrites.html
    - http://stackoverflow.com/questions/2374427

    """
    # print("Content-type: text/plain\n")  # for debugging
    print("Content-Type: application/pdf\n")
    # https://stackoverflow.com/questions/908331/how-to-write-binary-data-to-stdout-in-python-3  # noqa
    sys.stdout.buffer.write(pdf)


def make_pdf_writer() -> PdfFileWriter:
    """
    Creates and returns a PyPDF2 writer.
    """
    return PdfFileWriter()


=================
7543452
count:1
# =============================================================================
# Serve concatenated PDFs
# =============================================================================
# Two ways in principle to do this:
# (1) Load data from each PDF into memory; concatenate; serve the result.
# (2) With each PDF on disk, create a temporary file (e.g. with pdftk),
#     serve the result (e.g. in one go), then delete the temporary file.
#     This may be more memory-efficient.
#     However, there can be problems:
#       http://stackoverflow.com/questions/7543452/how-to-launch-a-pdftk-subprocess-while-in-wsgi  # noqa
# Others' examples:
#   https://gist.github.com/zyegfryed/918403
#   https://gist.github.com/grantmcconnaughey/ce90a689050c07c61c96
#   http://stackoverflow.com/questions/3582414/removing-tmp-file-after-return-httpresponse-in-django  # noqa

# def append_disk_pdf_to_writer(filename, writer):
#     """Appends a PDF from disk to a pyPDF writer."""
#     if writer.getNumPages() % 2 != 0:
#         writer.addBlankPage()
#         # ... keeps final result suitable for double-sided printing
=================
3582414
count:1
# (1) Load data from each PDF into memory; concatenate; serve the result.
# (2) With each PDF on disk, create a temporary file (e.g. with pdftk),
#     serve the result (e.g. in one go), then delete the temporary file.
#     This may be more memory-efficient.
#     However, there can be problems:
#       http://stackoverflow.com/questions/7543452/how-to-launch-a-pdftk-subprocess-while-in-wsgi  # noqa
# Others' examples:
#   https://gist.github.com/zyegfryed/918403
#   https://gist.github.com/grantmcconnaughey/ce90a689050c07c61c96
#   http://stackoverflow.com/questions/3582414/removing-tmp-file-after-return-httpresponse-in-django  # noqa

# def append_disk_pdf_to_writer(filename, writer):
#     """Appends a PDF from disk to a pyPDF writer."""
#     if writer.getNumPages() % 2 != 0:
#         writer.addBlankPage()
#         # ... keeps final result suitable for double-sided printing
#     with open(filename, mode='rb') as infile:
#         reader = PdfFileReader(infile)
#         for page_num in range(reader.numPages):
#             writer.addPage(reader.getPage(page_num))
=================
17104926
count:1

    Args:
        filenames: iterable of filenames of PDFs to concatenate
        start_recto: start a new right-hand page for each new PDF?

    Returns:
        concatenated PDF, as ``bytes``

    """
    # http://stackoverflow.com/questions/17104926/pypdf-merging-multiple-pdf-files-into-one-pdf  # noqa
    # https://en.wikipedia.org/wiki/Recto_and_verso
    if start_recto:
        writer = PdfFileWriter()
        for filename in filenames:
            if filename:
                if writer.getNumPages() % 2 != 0:
                    writer.addBlankPage()
                writer.appendPagesFromReader(
                    PdfFileReader(open(filename, 'rb')))
        return pdf_from_writer(writer)
=================
2203424
count:1

def get_class_name_from_frame(fr: FrameType) -> Optional[str]:
    """
    A frame contains information about a specific call in the Python call
    stack; see https://docs.python.org/3/library/inspect.html.

    If the call was to a member function of a class, this function attempts
    to read the class's name. It returns ``None`` otherwise.
    """
    # http://stackoverflow.com/questions/2203424/python-how-to-retrieve-class-information-from-a-frame-object  # noqa
    args, _, _, value_dict = inspect.getargvalues(fr)
    # we check the first parameter for the frame function is named 'self'
    if len(args) and args[0] == 'self':
        # in that case, 'self' will be referenced in value_dict
        instance = value_dict.get('self', None)
        if instance:
            # return its class
            cls = getattr(instance, '__class__', None)
            if cls:
                return cls.__name__
=================
5067604
count:1
    will produce:

    .. code-block:: none

        I am: MyClass.classfunc
        I was called by: f2
        That was called by: f1

    """
    # http://stackoverflow.com/questions/5067604/determine-function-name-from-within-that-function-without-using-traceback  # noqa
    try:
        # noinspection PyProtectedMember
        frame = sys._getframe(back + 2)
    except ValueError:
        # Stack isn't deep enough.
        return '?'
    function_name = frame.f_code.co_name
    class_name = get_class_name_from_frame(frame)
    if class_name:
        return f"{class_name}.{function_name}"
=================
123558
count:1
    """
    If we're running under SQL Server, disable constraint checking for the
    specified table while the resource is held.

    Args:
        session: SQLAlchemy :class:`Session`
        tablename: table name

    See
    https://stackoverflow.com/questions/123558/sql-server-2005-t-sql-to-temporarily-disable-a-trigger
    """  # noqa
    engine = get_engine_from_session(session)
    if is_sqlserver(engine):
        quoted_tablename = quote_identifier(tablename, engine)
        session.execute(
            f"ALTER TABLE {quoted_tablename} NOCHECK CONSTRAINT all")
        yield
        session.execute(
            f"ALTER TABLE {quoted_tablename} WITH CHECK CHECK CONSTRAINT all")
    else:
=================
123558
count:1
    """
    If we're running under SQL Server, disable triggers for the specified table
    while the resource is held.

    Args:
        session: SQLAlchemy :class:`Session`
        tablename: table name

    See
    https://stackoverflow.com/questions/123558/sql-server-2005-t-sql-to-temporarily-disable-a-trigger
    """  # noqa
    engine = get_engine_from_session(session)
    if is_sqlserver(engine):
        quoted_tablename = quote_identifier(tablename, engine)
        session.execute(
            f"ALTER TABLE {quoted_tablename} DISABLE TRIGGER all")
        yield
        session.execute(
            f"ALTER TABLE {quoted_tablename} ENABLE TRIGGER all")
    else:
=================
2537471
count:1

class SqlAlchemyAttrDictMixin(object):
    """
    Mixin to:

    - get a plain dictionary-like object (with attributes so we can use ``x.y``
      rather than ``x['y']``) from an SQLAlchemy ORM object
    - make a nice ``repr()`` default, maintaining field order

    See http://stackoverflow.com/questions/2537471 and in particular
    http://stackoverflow.com/questions/2441796.
    """

    def get_attrdict(self) -> OrderedNamespace:
        """
        Returns what looks like a plain object with the values of the
        SQLAlchemy ORM object.
        """
        # noinspection PyUnresolvedReferences
        columns = self.__table__.columns.keys()
=================
2441796
count:1
class SqlAlchemyAttrDictMixin(object):
    """
    Mixin to:

    - get a plain dictionary-like object (with attributes so we can use ``x.y``
      rather than ``x['y']``) from an SQLAlchemy ORM object
    - make a nice ``repr()`` default, maintaining field order

    See http://stackoverflow.com/questions/2537471 and in particular
    http://stackoverflow.com/questions/2441796.
    """

    def get_attrdict(self) -> OrderedNamespace:
        """
        Returns what looks like a plain object with the values of the
        SQLAlchemy ORM object.
        """
        # noinspection PyUnresolvedReferences
        columns = self.__table__.columns.keys()
        values = (getattr(self, x) for x in columns)
=================
19175311
count:1
        engine: SQLAlchemy :class:`Engine` object
        ormclass: SQLAlchemy ORM class
        without_constraints: don't add foreign key constraints
    """
    table = ormclass.__table__  # type: Table
    log.info("Creating table {} on engine {}{}",
             table.name,
             get_safe_url_from_engine(engine),
             " (omitting constraints)" if without_constraints else "")
    # https://stackoverflow.com/questions/19175311/how-to-create-only-one-table-with-sqlalchemy  # noqa
    if without_constraints:
        include_foreign_key_constraints = []
    else:
        include_foreign_key_constraints = None  # the default
    creator = CreateTable(
        table,
        include_foreign_key_constraints=include_foreign_key_constraints
    )
=================
24622170
count:1
    "pk": "pk_%(table_name)s"
}

DEFAULT_ALEMBIC_VERSION_TABLE = "alembic_version"


# =============================================================================
# Alembic revision/migration system
# =============================================================================
# http://stackoverflow.com/questions/24622170/using-alembic-api-from-inside-application-code  # noqa

def get_head_revision_from_alembic(
        alembic_config_filename: str,
        alembic_base_dir: str = None,
        version_table: str = DEFAULT_ALEMBIC_VERSION_TABLE) -> str:
    """
    Ask Alembic what its head revision is (i.e. where the Python code would
    like the database to be at).

    Arguments:
=================
870925
count:1

    Args:
        metadata: SQLAlchemy :class:`MetaData`
        dialect_name: string name of SQL dialect to generate DDL in
        fileobj: file-like object to send DDL to
        checkfirst: if ``True``, use ``CREATE TABLE IF NOT EXISTS`` or
            equivalent.
    """
    # http://docs.sqlalchemy.org/en/rel_0_8/faq.html#how-can-i-get-the-create-table-drop-table-output-as-a-string  # noqa
    # http://stackoverflow.com/questions/870925/how-to-generate-a-file-with-ddl-in-the-engines-sql-dialect-in-sqlalchemy  # noqa
    # https://github.com/plq/scripts/blob/master/pg_dump.py
    # noinspection PyUnusedLocal
    def dump(querysql, *multiparams, **params):
        compsql = querysql.compile(dialect=engine.dialect)
        writeline_nl(fileobj, f"{compsql};")

    writeline_nl(fileobj,
                 sql_comment(f"Schema (for dialect {dialect_name}):"))
    engine = create_engine(f'{dialect_name}://',
                           strategy='mock', executor=dump)
=================
5631078
count:1

    # noinspection PyTypeChecker
    return GenericMapper


class StringLiteral(String):
    """
    Teach SQLAlchemy how to literalize various things.
    See
    http://stackoverflow.com/questions/5631078/sqlalchemy-print-the-actual-query
    """
    def literal_processor(self,
                          dialect: DefaultDialect) -> Callable[[Any], str]:
        super_processor = super().literal_processor(dialect)

        def process(value: Any) -> str:
            log.debug("process: {!r}", value)
            if isinstance(value, int):
                return str(value)
            if not isinstance(value, str):
=================
5631078
count:1
        return process


# noinspection PyPep8Naming
def make_literal_query_fn(dialect: DefaultDialect) -> Callable[[str], str]:
    DialectClass = dialect.__class__

    # noinspection PyClassHasNoInit,PyAbstractClass
    class LiteralDialect(DialectClass):
        # http://stackoverflow.com/questions/5631078/sqlalchemy-print-the-actual-query  # noqa
        colspecs = {
            # prevent various encoding explosions
            String: StringLiteral,
            # teach SA about how to literalize a datetime
            DateTime: StringLiteral,
            # don't format py2 long integers to NULL
            NullType: StringLiteral,
        }

    def literal_query(statement: str) -> str:
=================
5631078
count:1
            # don't format py2 long integers to NULL
            NullType: StringLiteral,
        }

    def literal_query(statement: str) -> str:
        """
        NOTE: This is entirely insecure. DO NOT execute the resulting
        strings.
        """
        # http://stackoverflow.com/questions/5631078/sqlalchemy-print-the-actual-query  # noqa
        if isinstance(statement, Query):
            statement = statement.statement
        return statement.compile(
            dialect=LiteralDialect(),
            compile_kwargs={'literal_binds': True},
        ).string + ";"

    return literal_query


=================
5631078
count:1

# noinspection PyProtectedMember
def get_literal_query(statement: Union[Query, Executable],
                      bind: Connectable = None) -> str:
    """
    Takes an SQLAlchemy statement and produces a literal SQL version, with
    values filled in.
    
    As per
    http://stackoverflow.com/questions/5631078/sqlalchemy-print-the-actual-query
    
    Notes:
    - for debugging purposes *only*
    - insecure; you should always separate queries from their values
    - please also note that this function is quite slow 
    
    Args:
        statement: the SQL statement (a SQLAlchemy object) to use
        bind: if the statement is unbound, you will need to specify an object
            here that supports SQL execution 
=================
5631078
count:1
    Args:
        engine: SQLAlchemy :class:`Engine`
        table_name: name of the table
        fileobj: file-like object to write to
        wheredict: optional dictionary of ``{column_name: value}`` to use as
            ``WHERE`` filters
        include_ddl: if ``True``, include the DDL to create the table as well
        multirow: write multi-row ``INSERT`` statements
    """
    # http://stackoverflow.com/questions/5631078/sqlalchemy-print-the-actual-query  # noqa
    # http://docs.sqlalchemy.org/en/latest/faq/sqlexpressions.html
    # http://www.tylerlesmann.com/2009/apr/27/copying-databases-across-platforms-sqlalchemy/  # noqa
    # https://github.com/plq/scripts/blob/master/pg_dump.py
    log.info("dump_data_as_insert_sql: table_name={}", table_name)
    writelines_nl(fileobj, [
        SEP1,
        sql_comment(f"Data for table: {table_name}"),
        SEP2,
        sql_comment(f"Filters: {wheredict}"),
    ])
=================
5014700
count:1
    Args:
        engine: SQLAlchemy :class:`Engine`
        baseobj: starting SQLAlchemy ORM object
        fileobj: file-like object to write to

    Problem: foreign key constraints.
    
    - MySQL/InnoDB doesn't wait to the end of a transaction to check FK
      integrity (which it should):
      http://stackoverflow.com/questions/5014700/in-mysql-can-i-defer-referential-integrity-checks-until-commit  # noqa
    - PostgreSQL can.
    - Anyway, slightly ugly hacks...
      https://dev.mysql.com/doc/refman/5.5/en/optimizing-innodb-bulk-data-loading.html
    - Not so obvious how we can iterate through the list of ORM objects and
      guarantee correct insertion order with respect to all FKs.
    """  # noqa
    writeline_nl(
        fileobj,
        sql_comment("Data for all objects related to the first below:"))
    bulk_insert_extras(engine.dialect.name, fileobj, start=True)
=================
6611563
count:1

===============================================================================

**Add "INSERT ON DUPLICATE KEY UPDATE" functionality to SQLAlchemy for MySQL.**

- https://www.reddit.com/r/Python/comments/p5grh/sqlalchemy_whats_the_idiomatic_way_of_writing/
- https://github.com/bedwards/sqlalchemy_mysql_ext/blob/master/duplicate.py
  ... modified
- http://docs.sqlalchemy.org/en/rel_1_0/core/compiler.html
- http://stackoverflow.com/questions/6611563/sqlalchemy-on-duplicate-key-update
- http://dev.mysql.com/doc/refman/5.7/en/insert-on-duplicate.html

Once implemented, you can do

.. code-block:: python

    q = sqla_table.insert_on_duplicate().values(destvalues)
    session.execute(q)

**Note: superseded by SQLAlchemy v1.2:**
=================
6611563
count:1
    ON DUPLICATE KEY UPDATE`` statement.

    Notes:
 
    - We can't get the fieldnames directly from ``insert`` or ``compiler``.
    - We could rewrite the innards of the visit_insert statement
      (https://github.com/bedwards/sqlalchemy_mysql_ext/blob/master/duplicate.py)... 
      but, like that, it will get outdated.
    - We could use a hack-in-by-hand method
      (http://stackoverflow.com/questions/6611563/sqlalchemy-on-duplicate-key-update)
      ... but a little automation would be nice.
    - So, regex to the rescue.
    - NOTE THAT COLUMNS ARE ALREADY QUOTED by this stage; no need to repeat.
    """  # noqa
    # log.critical(compiler.__dict__)
    # log.critical(compiler.dialect.__dict__)
    # log.critical(insert.__dict__)
    s = compiler.visit_insert(insert, **kw)
    # log.critical(s)
    m = RE_INSERT_FIELDNAMES.match(s)
=================
12941416
count:1
    result = session.execute(sql)  # type: ResultProxy
    fieldnames = result.keys()
    rows = result.fetchall()
    return rows, fieldnames


# =============================================================================
# SELECT COUNT(*) (SQLAlchemy Core)
# =============================================================================
# http://stackoverflow.com/questions/12941416

def count_star(session: Union[Session, Engine, Connection],
               tablename: str,
               *criteria: Any) -> int:
    """
    Returns the result of ``COUNT(*)`` from the specified table (with
    additional ``WHERE`` criteria if desired).

    Args:
        session: SQLAlchemy :class:`Session`, :class:`Engine`, or
=================
15381604
count:1
    for criterion in criteria:
        query = query.where(criterion)
    result = session.execute(query)
    return result.fetchone()  # count, maximum


# =============================================================================
# SELECT EXISTS (SQLAlchemy Core)
# =============================================================================
# http://stackoverflow.com/questions/15381604
# http://docs.sqlalchemy.org/en/latest/orm/query.html

def exists_in_table(session: Session, table_: Table, *criteria: Any) -> bool:
    """
    Implements an efficient way of detecting if a record or records exist;
    should be faster than ``COUNT(*)`` in some circumstances.

    Args:
        session: SQLAlchemy :class:`Session`, :class:`Engine`, or
            :class:`Connection` object
=================
14636192
count:1
                         " (DUMMY RUN)" if dummy_run else "",
                         table_num, tablename,
                         table_record_num, overall_record_num)

            if tdc.standalone:
                # Our table has neither parents nor children. We can therefore
                # simply move the instance from one session to the other,
                # blanking primary keys.

                # https://stackoverflow.com/questions/14636192/sqlalchemy-modification-of-detached-object  # noqa
                src_session.expunge(instance)
                make_transient(instance)
                if wipe_pk:
                    wipe_primary_key(instance)

                instance = translate(instance, instance)
                if not instance:
                    continue  # translate_fn elected to skip it

                if not dummy_run:
=================
1323455
count:1
      .. code-block:: python

        setUp()
        testSOMETHING()
        tearDown()

      ... see https://docs.python.org/3.6/library/unittest.html#test-cases

    - If you use mixins, they go AFTER :class:`unittest.TestCase`; see
      https://stackoverflow.com/questions/1323455/python-unit-test-with-base-and-sub-class

    """  # noqa
    def setUp(self) -> None:
        # log.info('In setUp()')

        class Parent(self.Base):
            __tablename__ = "parent"
            id = Column(Integer, primary_key=True, autoincrement=True)
            name = Column(Text)

=================
6455560
count:1
        session: SQLAlchemy :class:`Session`, :class:`Engine`, or
            :class:`Connection` object
        query: SQLAlchemy :class:`Query`

    Returns:
        ``(rows, fieldnames)`` where ``rows`` is the usual set of results and
        ``fieldnames`` are the name of the result columns/fields.

    """
    # https://stackoverflow.com/questions/6455560/how-to-get-column-names-from-sqlalchemy-result-declarative-syntax  # noqa
    # No! Returns e.g. "User" for session.Query(User)...
    # fieldnames = [cd['name'] for cd in query.column_descriptions]
    result = session.execute(query)  # type: ResultProxy
    fieldnames = result.keys()
    # ... yes! Comes out as "_table_field", which is how SQLAlchemy SELECTs
    # things.
    rows = result.fetchall()
    return rows, fieldnames


=================
2546207
count:1
        session: an SQLAlchemy :class:`Session`
        model: an SQLAlchemy ORM class
        defaults: default initialization arguments (in addition to relevant
            filter criteria) if we have to create a new instance
        kwargs: optional filter criteria

    Returns:
        a tuple ``(instance, newly_created)``

    See http://stackoverflow.com/questions/2546207 (this function is a
    composite of several suggestions).
    """
    instance = session.query(model).filter_by(**kwargs).first()
    if instance:
        return instance, False
    else:
        params = dict((k, v) for k, v in kwargs.items()
                      if not isinstance(v, ClauseElement))
        params.update(defaults or {})
        instance = model(**params)
=================
12941416
count:1
# =============================================================================

# noinspection PyAbstractClass
class CountStarSpecializedQuery(Query):
    def __init__(self, *args, **kwargs) -> None:
        """
        Optimizes ``COUNT(*)`` queries.

        See
        https://stackoverflow.com/questions/12941416/how-to-count-rows-with-select-count-with-sqlalchemy

        Example use:

        .. code-block:: python

            q = CountStarSpecializedQuery([cls], session=dbsession)\
                .filter(cls.username == username)
            return q.count_star()

        """  # noqa
=================
87747
count:1
      .. code-block:: sql

        SELECT table_name, column_name
        FROM information_schema.columns
        WHERE COLUMNPROPERTY(OBJECT_ID(table_schema + '.' + table_name),
                             column_name,
                             'IsIdentity') = 1
        ORDER BY table_name;

      ... http://stackoverflow.com/questions/87747

    - Also:

      .. code-block:: sql

        sp_columns 'tablename';

      ... which is what SQLAlchemy does (``dialects/mssql/base.py``, in
      :func:`get_columns`).
    """
=================
2937229
count:1
    if dialect.name == SqlaDialectName.MSSQL:
        return Column(column_name, BigInteger,
                      Sequence('dummy_name', start=1, increment=1))
    else:
        # return Column(column_name, BigInteger, autoincrement=True)
        # noinspection PyUnresolvedReferences
        raise AssertionError(
            f"SQLAlchemy doesn't support non-PK autoincrement fields yet for "
            f"dialect {dialect.name!r}")
        # see http://stackoverflow.com/questions/2937229


def column_creation_ddl(sqla_column: Column, dialect: Dialect) -> str:
    """
    Returns DDL to create a column, using the specified dialect.

    The column should already be bound to a table (because e.g. the SQL Server
    dialect requires this for DDL generation).

    Manual testing:
=================
10262426
count:1
        return mysql.base.BIT()

    # -------------------------------------------------------------------------
    # TIMESTAMP
    # -------------------------------------------------------------------------
    is_mssql_timestamp = isinstance(coltype, MSSQL_TIMESTAMP)
    if is_mssql_timestamp and to_mssql and convert_mssql_timestamp:
        # You cannot write explicitly to a TIMESTAMP field in SQL Server; it's
        # used for autogenerated values only.
        # - http://stackoverflow.com/questions/10262426/sql-server-cannot-insert-an-explicit-value-into-a-timestamp-column  # noqa
        # - https://social.msdn.microsoft.com/Forums/sqlserver/en-US/5167204b-ef32-4662-8e01-00c9f0f362c2/how-to-tranfer-a-column-with-timestamp-datatype?forum=transactsql  # noqa
        #   ... suggesting BINARY(8) to store the value.
        # MySQL is more helpful:
        # - http://stackoverflow.com/questions/409286/should-i-use-field-datetime-or-timestamp  # noqa
        return mssql.base.BINARY(8)

    # -------------------------------------------------------------------------
    # Some other type
    # -------------------------------------------------------------------------
    return coltype
=================
409286
count:1
    # -------------------------------------------------------------------------
    is_mssql_timestamp = isinstance(coltype, MSSQL_TIMESTAMP)
    if is_mssql_timestamp and to_mssql and convert_mssql_timestamp:
        # You cannot write explicitly to a TIMESTAMP field in SQL Server; it's
        # used for autogenerated values only.
        # - http://stackoverflow.com/questions/10262426/sql-server-cannot-insert-an-explicit-value-into-a-timestamp-column  # noqa
        # - https://social.msdn.microsoft.com/Forums/sqlserver/en-US/5167204b-ef32-4662-8e01-00c9f0f362c2/how-to-tranfer-a-column-with-timestamp-datatype?forum=transactsql  # noqa
        #   ... suggesting BINARY(8) to store the value.
        # MySQL is more helpful:
        # - http://stackoverflow.com/questions/409286/should-i-use-field-datetime-or-timestamp  # noqa
        return mssql.base.BINARY(8)

    # -------------------------------------------------------------------------
    # Some other type
    # -------------------------------------------------------------------------
    return coltype


# =============================================================================
# Questions about SQLAlchemy column types
=================
32917867
count:1
    .. code-block:: none
    
       sqlalchemy\dialects\mssql\base.py:1921: SAWarning: Did not recognize type 'xml' of column '...'

    We will convert anything of type ``XML`` into type ``TEXT``.

    """  # noqa
    log.debug("Adding type 'xml' to SQLAlchemy reflection for dialect 'mssql'")
    mssql.base.ischema_names['xml'] = mssql.base.TEXT
    # http://stackoverflow.com/questions/32917867/sqlalchemy-making-schema-reflection-find-use-a-custom-type-for-all-instances  # noqa

    # print(repr(mssql.base.ischema_names.keys()))
    # print(repr(mssql.base.ischema_names))


# =============================================================================
# Check column definition equality
# =============================================================================

def column_types_equal(a_coltype: TypeEngine, b_coltype: TypeEngine) -> bool:
=================
34787794
count:1
# =============================================================================
# Check column definition equality
# =============================================================================

def column_types_equal(a_coltype: TypeEngine, b_coltype: TypeEngine) -> bool:
    """
    Checks that two SQLAlchemy column types are equal (by comparing ``str()``
    versions of them).
    
    See http://stackoverflow.com/questions/34787794/sqlalchemy-column-type-comparison.
    
    IMPERFECT. 
    """  # noqa
    return str(a_coltype) == str(b_coltype)


def columns_equal(a: Column, b: Column) -> bool:
    """
    Are two SQLAlchemy columns are equal? Checks based on:

=================
1675181
count:1
        s: the argument

    See:

    - http://code.activestate.com/lists/python-list/272714/ -- does not work
      as null values get escaped in different ways in modern Python, and in a
      slightly unpredictable way
    - https://mail.python.org/pipermail/python-list/2003-April/236940.html --
      won't deal with repr() using triple-quotes
    - https://stackoverflow.com/questions/1675181/get-str-repr-with-double-quotes-python
      -- probably the right general approach

    Test code:

    .. code-block:: python

        from cardinal_pythonlib.snomed import double_quoted
        
        def test(s):
            print(f"double_quoted({s!r}) -> {double_quoted(s)}")
=================
3055477
count:1
            print(f"double_quoted({s!r}) -> {double_quoted(s)}")
        
        
        test("ab'cd")
        test("ab'c\"d")
        test('ab"cd')

    """  # noqa
    # For efficiency, we use a list:
    # https://stackoverflow.com/questions/3055477/how-slow-is-pythons-string-concatenation-vs-str-join  # noqa
    # https://waymoot.org/home/python_string/
    dquote = '"'
    ret = [dquote]  # type: List[str]
    for c in s:
        # "Named" characters
        if c == NEWLINE:
            ret.append(r"\n")
        elif c == TAB:
            ret.append(r"\t")
        elif c == QM:
=================
169070
count:1

        @preserve_cwd
        def myfunc():
            os.chdir("/faraway")

        os.chdir("/home")
        myfunc()
        assert os.getcwd() == "/home"
    """
    # http://stackoverflow.com/questions/169070/python-how-do-i-write-a-decorator-that-restores-the-cwd  # noqa
    def decorator(*args_, **kwargs) -> Any:
        cwd = os.getcwd()
        result = func(*args_, **kwargs)
        os.chdir(cwd)
        return result
    return decorator


def root_path() -> str:
    """
=================
12041525
count:1
        os.chdir(cwd)
        return result
    return decorator


def root_path() -> str:
    """
    Returns the system root directory.
    """
    # http://stackoverflow.com/questions/12041525
    return os.path.abspath(os.sep)


# =============================================================================
# Copy or move things
# =============================================================================

def copyglob(src: str, dest: str, allow_nothing: bool = False,
             allow_nonfiles: bool = False) -> None:
    """
=================
2656322
count:1

    If the error is due to an access error (read only file)
    it attempts to add write permission and then retries.

    If the error is for another reason it re-raises the error.

    Usage: ``shutil.rmtree(path, onerror=shutil_rmtree_onerror)``
    
    See
    https://stackoverflow.com/questions/2656322/shutil-rmtree-fails-on-windows-with-access-is-denied
    """  # noqa
    if not os.access(path, os.W_OK):
        # Is the error an access error ?
        os.chmod(path, stat.S_IWUSR)
        func(path)
    else:
        exc = exc_info[1]
        raise exc


=================
2853723
count:1
def chown_r(path: str, user: str, group: str) -> None:
    """
    Performs a recursive ``chown``.

    Args:
        path: path to walk down
        user: user name or ID
        group: group name or ID

    As per http://stackoverflow.com/questions/2853723
    """
    for root, dirs, files in os.walk(path):
        for x in dirs:
            shutil.chown(os.path.join(root, x), user, group)
        for x in files:
            shutil.chown(os.path.join(root, x), user, group)


def chmod_r(root: str, permission: int) -> None:
    """
=================
1392413
count:1
# =============================================================================
# Disk space
# =============================================================================

def get_directory_contents_size(directory: str = ".") -> int:
    """
    Returns the total size of all files within a directory.

    See
    https://stackoverflow.com/questions/1392413/calculating-a-directorys-size-using-python.

    Args:
        directory: directory to check

    Returns:
        int: size in bytes
    """  # noqa
    total_size = 0
    for dirpath, dirnames, filenames in os.walk(directory):
        for f in filenames:
=================
43878953
count:1

import os


def running_under_docker() -> bool:
    """
    Are we running inside a Docker container?

    As per
    https://stackoverflow.com/questions/43878953/how-does-one-detect-if-one-is-running-within-a-docker-container-within-python
    """  # noqa
    path = '/proc/self/cgroup'
    return (
        os.path.exists('/.dockerenv') or
        (
            os.path.isfile(path) and
            any('docker' in line for line in open(path))
        )
=================
51264355
count:1

# =============================================================================
# csv.writer
# =============================================================================

class CSVWriterType(object):
    """
    Type hint for the result of ``csv.writer()``

    See https://stackoverflow.com/questions/51264355/how-to-type-annotate-object-returned-by-csv-writer
    """  # noqa

    @abstractmethod
    def writerow(self, row: List[str]) -> None:
        pass

    @abstractmethod
    def writerows(self, rows: List[List[str]]) -> None:
        pass

=================
35344209
count:1
        pass

    # noinspection PyUnresolvedReferences
    @arraysize.setter
    @abstractmethod
    def arraysize(self, val: int) -> None:
        """
        See https://www.python.org/dev/peps/pep-0249/#cursor-objects
        """
        # https://stackoverflow.com/questions/35344209/python-abstract-property-setter-with-concrete-getter
        pass

    @abstractmethod
    def setinputsizes(self, sizes: Sequence[Union[Type, int]]) -> None:
        """
        See https://www.python.org/dev/peps/pep-0249/#cursor-objects
        """
        pass

    @abstractmethod
=================
7585435
count:1
# Support functions
# =============================================================================

def to_bytes(data: Any) -> bytearray:
    """
    Convert anything to a ``bytearray``.
    
    See
    
    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3
    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1
    """  # noqa
    if isinstance(data, int):
        return bytearray([data])
    return bytearray(data, encoding='latin-1')


def to_str(data: Any) -> str:
    """
    Convert anything to a ``str``.
=================
10459067
count:1
# =============================================================================

def to_bytes(data: Any) -> bytearray:
    """
    Convert anything to a ``bytearray``.
    
    See
    
    - http://stackoverflow.com/questions/7585435/best-way-to-convert-string-to-bytes-in-python-3
    - http://stackoverflow.com/questions/10459067/how-to-convert-my-bytearrayb-x9e-x18k-x9a-to-something-like-this-x9e-x1
    """  # noqa
    if isinstance(data, int):
        return bytearray([data])
    return bytearray(data, encoding='latin-1')


def to_str(data: Any) -> str:
    """
    Convert anything to a ``str``.
    """
=================
1604464
count:1
    version.

    Args:
        val: positive integer representing a number in two's complement format
        n_bits: number of bits (which must reflect a whole number of bytes)

    Returns:
        signed integer

    See http://stackoverflow.com/questions/1604464/twos-complement-in-python

    """
    assert n_bits % 8 == 0, "Must specify a whole number of bytes"
    n_bytes = n_bits // 8
    b = val.to_bytes(n_bytes, byteorder=sys.byteorder, signed=False)
    return int.from_bytes(b, byteorder=sys.byteorder, signed=True)


def signed_to_twos_comp(val: int, n_bits: int) -> int:
    """
=================
13305290
count:1
# =============================================================================

# -----------------------------------------------------------------------------
# SO ones
# -----------------------------------------------------------------------------

def murmur3_x86_32(data: Union[bytes, bytearray], seed: int = 0) -> int:
    """
    Pure 32-bit Python implementation of MurmurHash3; see
    http://stackoverflow.com/questions/13305290/is-there-a-pure-python-implementation-of-murmurhash.
     
    Args:
        data: data to hash 
        seed: seed

    Returns:
        integer hash

    """  # noqa
    c1 = 0xcc9e2d51
=================
13305290
count:1
    h1 ^= ((h1 & 0xffffffff) >> 16)

    return h1 & 0xffffffff


# noinspection PyPep8
def murmur3_64(data: Union[bytes, bytearray], seed: int = 19820125) -> int:
    """
    Pure 64-bit Python implementation of MurmurHash3; see
    http://stackoverflow.com/questions/13305290/is-there-a-pure-python-implementation-of-murmurhash
    (plus RNC bugfixes).
     
    Args:
        data: data to hash 
        seed: seed

    Returns:
        integer hash
    """  # noqa
    m = 0xc6a4a7935bd1e995
=================
1094841
count:1
===============================================================================
"""

from typing import Union


def sizeof_fmt(num: float, suffix: str = 'B') -> str:
    """
    Formats a number of bytes in a human-readable binary format (e.g. ``2048``
    becomes ``'2 KiB'``); from http://stackoverflow.com/questions/1094841.
    """
    for unit in ('', 'Ki', 'Mi', 'Gi', 'Ti', 'Pi', 'Ei', 'Zi'):
        if abs(num) < 1024.0:
            return "%3.1f%s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.1f%s%s" % (num, 'Yi', suffix)


# see: https://en.wikipedia.org/wiki/Binary_prefix
SYMBOLS = {
=================
125222
count:1

- Author: Rudolf Cardinal (rudolf@pobox.com)
- Created: Feb 2015
- Last update: 24 Sep 2015

See also:

- Word

  - http://stackoverflow.com/questions/125222
  - http://stackoverflow.com/questions/42482

- PDF

  - http://stackoverflow.com/questions/25665
  - https://pypi.python.org/pypi/slate
  - http://stackoverflow.com/questions/5725278

- RTF

=================
42482
count:1
- Author: Rudolf Cardinal (rudolf@pobox.com)
- Created: Feb 2015
- Last update: 24 Sep 2015

See also:

- Word

  - http://stackoverflow.com/questions/125222
  - http://stackoverflow.com/questions/42482

- PDF

  - http://stackoverflow.com/questions/25665
  - https://pypi.python.org/pypi/slate
  - http://stackoverflow.com/questions/5725278

- RTF

  - unrtf
=================
25665
count:1
See also:

- Word

  - http://stackoverflow.com/questions/125222
  - http://stackoverflow.com/questions/42482

- PDF

  - http://stackoverflow.com/questions/25665
  - https://pypi.python.org/pypi/slate
  - http://stackoverflow.com/questions/5725278

- RTF

  - unrtf
  - http://superuser.com/questions/243084/rtf-to-txt-on-unix

- Multi-purpose:

=================
5725278
count:1
- Word

  - http://stackoverflow.com/questions/125222
  - http://stackoverflow.com/questions/42482

- PDF

  - http://stackoverflow.com/questions/25665
  - https://pypi.python.org/pypi/slate
  - http://stackoverflow.com/questions/5725278

- RTF

  - unrtf
  - http://superuser.com/questions/243084/rtf-to-txt-on-unix

- Multi-purpose:

  - https://pypi.python.org/pypi/fulltext/
  - https://media.readthedocs.org/pdf/textract/latest/textract.pdf
=================
13857856
count:1
        log.warning("chardet not installed; limits detection of encodings")
        return None
    # METHOD 1
    # http://chardet.readthedocs.io/en/latest/
    #
    # guess = chardet.detect(binary_contents)
    #
    # METHOD 2: faster with large files
    # http://chardet.readthedocs.io/en/latest/
    # http://stackoverflow.com/questions/13857856/split-byte-string-into-lines

    # noinspection PyCallingNonCallable
    detector = UniversalDetector()
    for byte_line in binary_contents.split(b"\n"):
        detector.feed(byte_line)
        if detector.done:
            break
    guess = detector.result
    # Handle result
    if 'encoding' not in guess:
=================
25228106
count:1
            with get_filelikeobject(filename, blob) as fp:
                document = docx.opendocx(fp)
                paratextlist = docx.getdocumenttext(document)
            return '\n\n'.join(paratextlist)

    - Newer ``docx`` is python-docx

      - https://pypi.python.org/pypi/python-docx
      - https://python-docx.readthedocs.org/en/latest/
      - http://stackoverflow.com/questions/25228106

      However, it uses ``lxml``, which has C dependencies, so it doesn't always
      install properly on e.g. bare Windows machines.

      PERFORMANCE of my method:

      - nice table formatting
      - but tables grouped at end, not in sensible places
      - can iterate via ``doc.paragraphs`` and ``doc.tables`` but not in
        true document order, it seems
=================
653368
count:1
                self._db = db
                self._schema = schema
                self._table = table

    """
    if DEBUG:
        print(f"register_for_json: args = {args!r}")
        print(f"register_for_json: kwargs = {kwargs!r}")

    # http://stackoverflow.com/questions/653368/how-to-create-a-python-decorator-that-can-be-used-either-with-or-without-paramet  # noqa
    # In brief,
    #   @decorator
    #   x
    #
    # means
    #   x = decorator(x)
    #
    # so
    #   @decorator(args)
    #   x
=================
510357
count:1
except ImportError:
    msvcrt = None
    import termios  # Unix only
    import tty  # requires termios, so Unix only


# =============================================================================
# Read single character, waiting for it
# =============================================================================
# http://stackoverflow.com/questions/510357/python-read-a-single-character-from-the-user  # noqa
# http://home.wlu.edu/~levys/software/kbhit.py
# ... modified a little

def _getch_windows() -> str:
    """
    Under Windows, wets a single character from standard input. Does not echo
    to the screen.
    """
    # noinspection PyUnresolvedReferences
    return msvcrt.getch().decode('utf-8')
=================
2408560
count:1
    the screen. Note that the terminal will have been pre-configured, below.
    """
    return sys.stdin.read(1)


# =============================================================================
# Is a keystroke available?
# =============================================================================
# http://code.activestate.com/recipes/572182-how-to-implement-kbhit-on-linux/
# http://stackoverflow.com/questions/2408560/python-nonblocking-console-input

def _kbhit_windows() -> bool:
    """
    Under Windows: is a keystroke available?
    """
    # noinspection PyUnresolvedReferences
    return msvcrt.kbhit()


def _kbhit_unix() -> bool:
=================
12296214
count:1

.. code-block:: python

    import logging
    log = logging.getLogger(__name__)

    # ... and if you want to suppress output unless the user configures logs:
    log.addHandler(logging.NullHandler())
    # ... which only needs to be done in the __init__.py for the package
    #     http://stackoverflow.com/questions/12296214

    # LIBRARY CODE SHOULD NOT ADD ANY OTHER HANDLERS; see above.

DO NOT call this module "logging"! Many things may get confused.

"""

from html import escape
from inspect import Parameter, signature
import json
=================
7484454
count:1
    Args:
        logger: logger to modify
        level: log level to set
        remove_existing: remove existing handlers from logger first?
        extranames: additional names to append to the logger's name
        with_process_id: include the process ID in the logger's name?
        with_thread_id: include the thread ID in the logger's name?
    """
    if remove_existing:
        logger.handlers = []  # http://stackoverflow.com/questions/7484454
    handler = get_colour_handler(extranames,
                                 with_process_id=with_process_id,
                                 with_thread_id=with_thread_id)
    handler.setLevel(level)
    logger.addHandler(handler)
    logger.setLevel(level)


def main_only_quicksetup_rootlogger(level: int = logging.DEBUG,
                                    with_process_id: bool = False,
=================
7484454
count:1
    Generally MORE SENSIBLE just to apply a handler to the root logger.

    Args:
        handler: the handler to apply
        remove_existing: remove existing handlers from logger first?
    """
    # noinspection PyUnresolvedReferences
    for name, obj in logging.Logger.manager.loggerDict.items():
        if remove_existing:
            obj.handlers = []  # http://stackoverflow.com/questions/7484454
        obj.addHandler(handler)


def copy_root_log_to_file(filename: str,
                          fmt: str = LOG_FORMAT,
                          datefmt: str = LOG_DATEFMT) -> None:
    """
    Copy all currently configured logs to the specified file.

    Should ONLY be called from the ``if __name__ == 'main'`` script;
=================
13131400
count:1
        except:  # nopep8
            self.handleError(record)


# =============================================================================
# Brace formatters, for log.info("{}, {}", "hello", "world")
# =============================================================================

# - https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles  # noqa
# - https://stackoverflow.com/questions/13131400/logging-variable-data-with-new-format-string  # noqa
# - https://stackoverflow.com/questions/13131400/logging-variable-data-with-new-format-string/24683360#24683360  # noqa
# ... plus modifications to use inspect.signature() not inspect.getargspec()
# ... plus a performance tweak so we're not calling signature() every time
# See also:
# - https://www.simonmweber.com/2014/11/24/python-logging-traps.html

class BraceMessage(object):
    """
    Class to represent a message that includes a message including braces
    (``{}``) and a set of ``args``/``kwargs``. When converted to a ``str``,
=================
24683360
count:1
            self.handleError(record)


# =============================================================================
# Brace formatters, for log.info("{}, {}", "hello", "world")
# =============================================================================

# - https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles  # noqa
# - https://stackoverflow.com/questions/13131400/logging-variable-data-with-new-format-string  # noqa
# - https://stackoverflow.com/questions/13131400/logging-variable-data-with-new-format-string/24683360#24683360  # noqa
# ... plus modifications to use inspect.signature() not inspect.getargspec()
# ... plus a performance tweak so we're not calling signature() every time
# See also:
# - https://www.simonmweber.com/2014/11/24/python-logging-traps.html

class BraceMessage(object):
    """
    Class to represent a message that includes a message including braces
    (``{}``) and a set of ``args``/``kwargs``. When converted to a ``str``,
    the message is realized via ``msg.format(*args, **kwargs)``.
=================
31992424
count:1
    (``{}``) and a set of ``args``/``kwargs``. When converted to a ``str``,
    the message is realized via ``msg.format(*args, **kwargs)``.
    """
    def __init__(self,
                 fmt: str,
                 args: Tuple[Any, ...],
                 kwargs: Dict[str, Any]) -> None:
        # This version uses args and kwargs, not *args and **kwargs, for
        # performance reasons:
        # https://stackoverflow.com/questions/31992424/performance-implications-of-unpacking-dictionaries-in-python  # noqa
        # ... and since we control creation entirely, we may as well go fast
        self.fmt = fmt
        self.args = args
        self.kwargs = kwargs
        # print("Creating BraceMessage with: fmt={}, args={}, "
        #       "kwargs={}".format(repr(fmt), repr(args), repr(kwargs)))

    def __str__(self) -> str:
        return self.fmt.format(*self.args, **self.kwargs)

=================
1987919
count:1
            return f"Testclass.noparams: hello; a={self.a}"

        @mycache.cache_on_arguments(function_key_generator=kw_fkg)
        def no_params_instance_cache(self) -> str:
            fn_called("PER-INSTANCE-CACHED FUNCTION "
                      "TestClass.no_params_instance_cache() CALLED")
            return f"TestClass.no_params_instance_cache: a={self.a}"

        # Decorator order is critical here:
        # https://stackoverflow.com/questions/1987919/why-can-decorator-not-decorate-a-staticmethod-or-a-classmethod  # noqa
        @classmethod
        @mycache.cache_on_arguments(function_key_generator=plain_fkg)
        def classy(cls) -> str:
            fn_called("CACHED FUNCTION TestClass.classy() CALLED")
            return f"TestClass.classy: hello; c={cls.c}"

        @staticmethod
        @mycache.cache_on_arguments(function_key_generator=plain_fkg)
        def static() -> str:
            fn_called("CACHED FUNCTION TestClass.static() CALLED")
=================
1987919
count:1
            return f"Inherited.noparams: hello; a={self.a}"

        @mycache.cache_on_arguments(function_key_generator=kw_fkg)
        def no_params_instance_cache(self) -> str:
            fn_called("PER-INSTANCE-CACHED FUNCTION "
                      "Inherited.no_params_instance_cache() CALLED")
            return f"Inherited.no_params_instance_cache: a={self.a}"

        # Decorator order is critical here:
        # https://stackoverflow.com/questions/1987919/why-can-decorator-not-decorate-a-staticmethod-or-a-classmethod  # noqa
        @classmethod
        @mycache.cache_on_arguments(function_key_generator=plain_fkg)
        def classy(cls) -> str:
            fn_called("CACHED FUNCTION Inherited.classy() CALLED")
            return f"Inherited.classy: hello; c={cls.c}"

        @staticmethod
        @mycache.cache_on_arguments(function_key_generator=plain_fkg)
        def static() -> str:
            fn_called("CACHED FUNCTION Inherited.static() CALLED")
=================
4020539
count:1
    s = s.replace("\n", r"\n")  # escape \n; note ord("\n") == 10
    s = s.replace("\r", r"\r")  # escape \r; note ord("\r") == 13
    return s


def unescape_newlines(s: str) -> str:
    """
    Reverses :func:`escape_newlines`.
    """
    # See also http://stackoverflow.com/questions/4020539
    if not s:
        return s
    d = ""  # the destination string
    in_escape = False
    for i in range(len(s)):
        c = s[i]  # the character being processed
        if in_escape:
            if c == "r":
                d += "\r"
            elif c == "n":
=================
4020539
count:1
    s = s.replace("\r", r"\r")  # escape \r; note ord("\r") == 13
    s = s.replace("\t", r"\t")  # escape \t; note ord("\t") == 9
    return s


def unescape_tabs_newlines(s: str) -> str:
    """
    Reverses :func:`escape_tabs_newlines`.

    See also http://stackoverflow.com/questions/4020539.
    """
    if not s:
        return s
    d = ""  # the destination string
    in_escape = False
    for i in range(len(s)):
        c = s[i]  # the character being processed
        if in_escape:
            if c == "r":
                d += "\r"
=================
13233076
count:1
        if isinstance(src, int):
            charlist.append(chr(src))
        else:
            # Range like "0041-005A"
            first, last = [int(x, 16) for x in src.split("-")]
            charlist += [chr(x) for x in range(first, last + 1)]
    return "".join(charlist)


# https://stackoverflow.com/questions/13233076/determine-if-a-unicode-character-is-alphanumeric-without-using-a-regular-express  # noqa
_UNICODE_CATEGORY_SRC = {
    # From https://github.com/slevithan/xregexp/blob/master/tools/scripts/property-regex.py  # noqa
    'ASCII': ['0000-007F'],
    'Alphabetic': ['0041-005A', '0061-007A', 0x00AA, 0x00B5, 0x00BA, '00C0-00D6', '00D8-00F6', '00F8-02C1', '02C6-02D1', '02E0-02E4', 0x02EC, 0x02EE, 0x0345, '0370-0374', 0x0376, 0x0377, '037A-037D', 0x037F, 0x0386, '0388-038A', 0x038C, '038E-03A1', '03A3-03F5', '03F7-0481', '048A-052F', '0531-0556', 0x0559, '0561-0587', '05B0-05BD', 0x05BF, 0x05C1, 0x05C2, 0x05C4, 0x05C5, 0x05C7, '05D0-05EA', '05F0-05F2', '0610-061A', '0620-0657', '0659-065F', '066E-06D3', '06D5-06DC', '06E1-06E8', '06ED-06EF', '06FA-06FC', 0x06FF, '0710-073F', '074D-07B1', '07CA-07EA', 0x07F4, 0x07F5, 0x07FA, '0800-0817', '081A-082C', '0840-0858', '08A0-08B4', '08B6-08BD', '08D4-08DF', '08E3-08E9', '08F0-093B', '093D-094C', '094E-0950', '0955-0963', '0971-0983', '0985-098C', 0x098F, 0x0990, '0993-09A8', '09AA-09B0', 0x09B2, '09B6-09B9', '09BD-09C4', 0x09C7, 0x09C8, 0x09CB, 0x09CC, 0x09CE, 0x09D7, 0x09DC, 0x09DD, '09DF-09E3', 0x09F0, 0x09F1, '0A01-0A03', '0A05-0A0A', 0x0A0F, 0x0A10, '0A13-0A28', '0A2A-0A30', 0x0A32, 0x0A33, 0x0A35, 0x0A36, 0x0A38, 0x0A39, '0A3E-0A42', 0x0A47, 0x0A48, 0x0A4B, 0x0A4C, 0x0A51, '0A59-0A5C', 0x0A5E, '0A70-0A75', '0A81-0A83', '0A85-0A8D', '0A8F-0A91', '0A93-0AA8', '0AAA-0AB0', 0x0AB2, 0x0AB3, '0AB5-0AB9', '0ABD-0AC5', '0AC7-0AC9', 0x0ACB, 0x0ACC, 0x0AD0, '0AE0-0AE3', 0x0AF9, '0B01-0B03', '0B05-0B0C', 0x0B0F, 0x0B10, '0B13-0B28', '0B2A-0B30', 0x0B32, 0x0B33, '0B35-0B39', '0B3D-0B44', 0x0B47, 0x0B48, 0x0B4B, 0x0B4C, 0x0B56, 0x0B57, 0x0B5C, 0x0B5D, '0B5F-0B63', 0x0B71, 0x0B82, 0x0B83, '0B85-0B8A', '0B8E-0B90', '0B92-0B95', 0x0B99, 0x0B9A, 0x0B9C, 0x0B9E, 0x0B9F, 0x0BA3, 0x0BA4, '0BA8-0BAA', '0BAE-0BB9', '0BBE-0BC2', '0BC6-0BC8', '0BCA-0BCC', 0x0BD0, 0x0BD7, '0C00-0C03', '0C05-0C0C', '0C0E-0C10', '0C12-0C28', '0C2A-0C39', '0C3D-0C44', '0C46-0C48', '0C4A-0C4C', 0x0C55, 0x0C56, '0C58-0C5A', '0C60-0C63', '0C80-0C83', '0C85-0C8C', '0C8E-0C90', '0C92-0CA8', '0CAA-0CB3', '0CB5-0CB9', '0CBD-0CC4', '0CC6-0CC8', '0CCA-0CCC', 0x0CD5, 0x0CD6, 0x0CDE, '0CE0-0CE3', 0x0CF1, 0x0CF2, '0D01-0D03', '0D05-0D0C', '0D0E-0D10', '0D12-0D3A', '0D3D-0D44', '0D46-0D48', '0D4A-0D4C', 0x0D4E, '0D54-0D57', '0D5F-0D63', '0D7A-0D7F', 0x0D82, 0x0D83, '0D85-0D96', '0D9A-0DB1', '0DB3-0DBB', 0x0DBD, '0DC0-0DC6', '0DCF-0DD4', 0x0DD6, '0DD8-0DDF', 0x0DF2, 0x0DF3, '0E01-0E3A', '0E40-0E46', 0x0E4D, 0x0E81, 0x0E82, 0x0E84, 0x0E87, 0x0E88, 0x0E8A, 0x0E8D, '0E94-0E97', '0E99-0E9F', '0EA1-0EA3', 0x0EA5, 0x0EA7, 0x0EAA, 0x0EAB, '0EAD-0EB9', '0EBB-0EBD', '0EC0-0EC4', 0x0EC6, 0x0ECD, '0EDC-0EDF', 0x0F00, '0F40-0F47', '0F49-0F6C', '0F71-0F81', '0F88-0F97', '0F99-0FBC', '1000-1036', 0x1038, '103B-103F', '1050-1062', '1065-1068', '106E-1086', 0x108E, 0x109C, 0x109D, '10A0-10C5', 0x10C7, 0x10CD, '10D0-10FA', '10FC-1248', '124A-124D', '1250-1256', 0x1258, '125A-125D', '1260-1288', '128A-128D', '1290-12B0', '12B2-12B5', '12B8-12BE', 0x12C0, '12C2-12C5', '12C8-12D6', '12D8-1310', '1312-1315', '1318-135A', 0x135F, '1380-138F', '13A0-13F5', '13F8-13FD', '1401-166C', '166F-167F', '1681-169A', '16A0-16EA', '16EE-16F8', '1700-170C', '170E-1713', '1720-1733', '1740-1753', '1760-176C', '176E-1770', 0x1772, 0x1773, '1780-17B3', '17B6-17C8', 0x17D7, 0x17DC, '1820-1877', '1880-18AA', '18B0-18F5', '1900-191E', '1920-192B', '1930-1938', '1950-196D', '1970-1974', '1980-19AB', '19B0-19C9', '1A00-1A1B', '1A20-1A5E', '1A61-1A74', 0x1AA7, '1B00-1B33', '1B35-1B43', '1B45-1B4B', '1B80-1BA9', '1BAC-1BAF', '1BBA-1BE5', '1BE7-1BF1', '1C00-1C35', '1C4D-1C4F', '1C5A-1C7D', '1C80-1C88', '1CE9-1CEC', '1CEE-1CF3', 0x1CF5, 0x1CF6, '1D00-1DBF', '1DE7-1DF4', '1E00-1F15', '1F18-1F1D', '1F20-1F45', '1F48-1F4D', '1F50-1F57', 0x1F59, 0x1F5B, 0x1F5D, '1F5F-1F7D', '1F80-1FB4', '1FB6-1FBC', 0x1FBE, '1FC2-1FC4', '1FC6-1FCC', '1FD0-1FD3', '1FD6-1FDB', '1FE0-1FEC', '1FF2-1FF4', '1FF6-1FFC', 0x2071, 0x207F, '2090-209C', 0x2102, 0x2107, '210A-2113', 0x2115, '2119-211D', 0x2124, 0x2126, 0x2128, '212A-212D', '212F-2139', '213C-213F', '2145-2149', 0x214E, '2160-2188', '24B6-24E9', '2C00-2C2E', '2C30-2C5E', '2C60-2CE4', '2CEB-2CEE', 0x2CF2, 0x2CF3, '2D00-2D25', 0x2D27, 0x2D2D, '2D30-2D67', 0x2D6F, '2D80-2D96', '2DA0-2DA6', '2DA8-2DAE', '2DB0-2DB6', '2DB8-2DBE', '2DC0-2DC6', '2DC8-2DCE', '2DD0-2DD6', '2DD8-2DDE', '2DE0-2DFF', 0x2E2F, '3005-3007', '3021-3029', '3031-3035', '3038-303C', '3041-3096', '309D-309F', '30A1-30FA', '30FC-30FF', '3105-312D', '3131-318E', '31A0-31BA', '31F0-31FF', '3400-4DB5', '4E00-9FD5', 'A000-A48C', 'A4D0-A4FD', 'A500-A60C', 'A610-A61F', 0xA62A, 0xA62B, 'A640-A66E', 'A674-A67B', 'A67F-A6EF', 'A717-A71F', 'A722-A788', 'A78B-A7AE', 'A7B0-A7B7', 'A7F7-A801', 'A803-A805', 'A807-A80A', 'A80C-A827', 'A840-A873', 'A880-A8C3', 0xA8C5, 'A8F2-A8F7', 0xA8FB, 0xA8FD, 'A90A-A92A', 'A930-A952', 'A960-A97C', 'A980-A9B2', 'A9B4-A9BF', 0xA9CF, 'A9E0-A9E4', 'A9E6-A9EF', 'A9FA-A9FE', 'AA00-AA36', 'AA40-AA4D', 'AA60-AA76', 0xAA7A, 'AA7E-AABE', 0xAAC0, 0xAAC2, 'AADB-AADD', 'AAE0-AAEF', 'AAF2-AAF5', 'AB01-AB06', 'AB09-AB0E', 'AB11-AB16', 'AB20-AB26', 'AB28-AB2E', 'AB30-AB5A', 'AB5C-AB65', 'AB70-ABEA', 'AC00-D7A3', 'D7B0-D7C6', 'D7CB-D7FB', 'F900-FA6D', 'FA70-FAD9', 'FB00-FB06', 'FB13-FB17', 'FB1D-FB28', 'FB2A-FB36', 'FB38-FB3C', 0xFB3E, 0xFB40, 0xFB41, 0xFB43, 0xFB44, 'FB46-FBB1', 'FBD3-FD3D', 'FD50-FD8F', 'FD92-FDC7', 'FDF0-FDFB', 'FE70-FE74', 'FE76-FEFC', 'FF21-FF3A', 'FF41-FF5A', 'FF66-FFBE', 'FFC2-FFC7', 'FFCA-FFCF', 'FFD2-FFD7', 'FFDA-FFDC', '10000-1000B', '1000D-10026', '10028-1003A', 0x1003C, 0x1003D, '1003F-1004D', '10050-1005D', '10080-100FA', '10140-10174', '10280-1029C', '102A0-102D0', '10300-1031F', '10330-1034A', '10350-1037A', '10380-1039D', '103A0-103C3', '103C8-103CF', '103D1-103D5', '10400-1049D', '104B0-104D3', '104D8-104FB', '10500-10527', '10530-10563', '10600-10736', '10740-10755', '10760-10767', '10800-10805', 0x10808, '1080A-10835', 0x10837, 0x10838, 0x1083C, '1083F-10855', '10860-10876', '10880-1089E', '108E0-108F2', 0x108F4, 0x108F5, '10900-10915', '10920-10939', '10980-109B7', 0x109BE, 0x109BF, '10A00-10A03', 0x10A05, 0x10A06, '10A0C-10A13', '10A15-10A17', '10A19-10A33', '10A60-10A7C', '10A80-10A9C', '10AC0-10AC7', '10AC9-10AE4', '10B00-10B35', '10B40-10B55', '10B60-10B72', '10B80-10B91', '10C00-10C48', '10C80-10CB2', '10CC0-10CF2', '11000-11045', '11082-110B8', '110D0-110E8', '11100-11132', '11150-11172', 0x11176, '11180-111BF', '111C1-111C4', 0x111DA, 0x111DC, '11200-11211', '11213-11234', 0x11237, 0x1123E, '11280-11286', 0x11288, '1128A-1128D', '1128F-1129D', '1129F-112A8', '112B0-112E8', '11300-11303', '11305-1130C', 0x1130F, 0x11310, '11313-11328', '1132A-11330', 0x11332, 0x11333, '11335-11339', '1133D-11344', 0x11347, 0x11348, 0x1134B, 0x1134C, 0x11350, 0x11357, '1135D-11363', '11400-11441', '11443-11445', '11447-1144A', '11480-114C1', 0x114C4, 0x114C5, 0x114C7, '11580-115B5', '115B8-115BE', '115D8-115DD', '11600-1163E', 0x11640, 0x11644, '11680-116B5', '11700-11719', '1171D-1172A', '118A0-118DF', 0x118FF, '11AC0-11AF8', '11C00-11C08', '11C0A-11C36', '11C38-11C3E', 0x11C40, '11C72-11C8F', '11C92-11CA7', '11CA9-11CB6', '12000-12399', '12400-1246E', '12480-12543', '13000-1342E', '14400-14646', '16800-16A38', '16A40-16A5E', '16AD0-16AED', '16B00-16B36', '16B40-16B43', '16B63-16B77', '16B7D-16B8F', '16F00-16F44', '16F50-16F7E', '16F93-16F9F', 0x16FE0, '17000-187EC', '18800-18AF2', 0x1B000, 0x1B001, '1BC00-1BC6A', '1BC70-1BC7C', '1BC80-1BC88', '1BC90-1BC99', 0x1BC9E, '1D400-1D454', '1D456-1D49C', 0x1D49E, 0x1D49F, 0x1D4A2, 0x1D4A5, 0x1D4A6, '1D4A9-1D4AC', '1D4AE-1D4B9', 0x1D4BB, '1D4BD-1D4C3', '1D4C5-1D505', '1D507-1D50A', '1D50D-1D514', '1D516-1D51C', '1D51E-1D539', '1D53B-1D53E', '1D540-1D544', 0x1D546, '1D54A-1D550', '1D552-1D6A5', '1D6A8-1D6C0', '1D6C2-1D6DA', '1D6DC-1D6FA', '1D6FC-1D714', '1D716-1D734', '1D736-1D74E', '1D750-1D76E', '1D770-1D788', '1D78A-1D7A8', '1D7AA-1D7C2', '1D7C4-1D7CB', '1E000-1E006', '1E008-1E018', '1E01B-1E021', 0x1E023, 0x1E024, '1E026-1E02A', '1E800-1E8C4', '1E900-1E943', 0x1E947, '1EE00-1EE03', '1EE05-1EE1F', 0x1EE21, 0x1EE22, 0x1EE24, 0x1EE27, '1EE29-1EE32', '1EE34-1EE37', 0x1EE39, 0x1EE3B, 0x1EE42, 0x1EE47, 0x1EE49, 0x1EE4B, '1EE4D-1EE4F', 0x1EE51, 0x1EE52, 0x1EE54, 0x1EE57, 0x1EE59, 0x1EE5B, 0x1EE5D, 0x1EE5F, 0x1EE61, 0x1EE62, 0x1EE64, '1EE67-1EE6A', '1EE6C-1EE72', '1EE74-1EE77', '1EE79-1EE7C', 0x1EE7E, '1EE80-1EE89', '1EE8B-1EE9B', '1EEA1-1EEA3', '1EEA5-1EEA9', '1EEAB-1EEBB', '1F130-1F149', '1F150-1F169', '1F170-1F189', '20000-2A6D6', '2A700-2B734', '2B740-2B81D', '2B820-2CEA1', '2F800-2FA1D'],  # noqa
    'Any': ['0000-10FFFF'],
    # 'Assigned': [], # Defined as the inverse of category Cn
    'Default_Ignorable_Code_Point': [0x00AD, 0x034F, 0x061C, 0x115F, 0x1160, 0x17B4, 0x17B5, '180B-180E', '200B-200F', '202A-202E', '2060-206F', 0x3164, 'FE00-FE0F', 0xFEFF, 0xFFA0, 'FFF0-FFF8', '1BCA0-1BCA3', '1D173-1D17A', 'E0000-E0FFF'],  # noqa
    'Lowercase': ['0061-007A', 0x00AA, 0x00B5, 0x00BA, '00DF-00F6', '00F8-00FF', 0x0101, 0x0103, 0x0105, 0x0107, 0x0109, 0x010B, 0x010D, 0x010F, 0x0111, 0x0113, 0x0115, 0x0117, 0x0119, 0x011B, 0x011D, 0x011F, 0x0121, 0x0123, 0x0125, 0x0127, 0x0129, 0x012B, 0x012D, 0x012F, 0x0131, 0x0133, 0x0135, 0x0137, 0x0138, 0x013A, 0x013C, 0x013E, 0x0140, 0x0142, 0x0144, 0x0146, 0x0148, 0x0149, 0x014B, 0x014D, 0x014F, 0x0151, 0x0153, 0x0155, 0x0157, 0x0159, 0x015B, 0x015D, 0x015F, 0x0161, 0x0163, 0x0165, 0x0167, 0x0169, 0x016B, 0x016D, 0x016F, 0x0171, 0x0173, 0x0175, 0x0177, 0x017A, 0x017C, '017E-0180', 0x0183, 0x0185, 0x0188, 0x018C, 0x018D, 0x0192, 0x0195, '0199-019B', 0x019E, 0x01A1, 0x01A3, 0x01A5, 0x01A8, 0x01AA, 0x01AB, 0x01AD, 0x01B0, 0x01B4, 0x01B6, 0x01B9, 0x01BA, '01BD-01BF', 0x01C6, 0x01C9, 0x01CC, 0x01CE, 0x01D0, 0x01D2, 0x01D4, 0x01D6, 0x01D8, 0x01DA, 0x01DC, 0x01DD, 0x01DF, 0x01E1, 0x01E3, 0x01E5, 0x01E7, 0x01E9, 0x01EB, 0x01ED, 0x01EF, 0x01F0, 0x01F3, 0x01F5, 0x01F9, 0x01FB, 0x01FD, 0x01FF, 0x0201, 0x0203, 0x0205, 0x0207, 0x0209, 0x020B, 0x020D, 0x020F, 0x0211, 0x0213, 0x0215, 0x0217, 0x0219, 0x021B, 0x021D, 0x021F, 0x0221, 0x0223, 0x0225, 0x0227, 0x0229, 0x022B, 0x022D, 0x022F, 0x0231, '0233-0239', 0x023C, 0x023F, 0x0240, 0x0242, 0x0247, 0x0249, 0x024B, 0x024D, '024F-0293', '0295-02B8', 0x02C0, 0x02C1, '02E0-02E4', 0x0345, 0x0371, 0x0373, 0x0377, '037A-037D', 0x0390, '03AC-03CE', 0x03D0, 0x03D1, '03D5-03D7', 0x03D9, 0x03DB, 0x03DD, 0x03DF, 0x03E1, 0x03E3, 0x03E5, 0x03E7, 0x03E9, 0x03EB, 0x03ED, '03EF-03F3', 0x03F5, 0x03F8, 0x03FB, 0x03FC, '0430-045F', 0x0461, 0x0463, 0x0465, 0x0467, 0x0469, 0x046B, 0x046D, 0x046F, 0x0471, 0x0473, 0x0475, 0x0477, 0x0479, 0x047B, 0x047D, 0x047F, 0x0481, 0x048B, 0x048D, 0x048F, 0x0491, 0x0493, 0x0495, 0x0497, 0x0499, 0x049B, 0x049D, 0x049F, 0x04A1, 0x04A3, 0x04A5, 0x04A7, 0x04A9, 0x04AB, 0x04AD, 0x04AF, 0x04B1, 0x04B3, 0x04B5, 0x04B7, 0x04B9, 0x04BB, 0x04BD, 0x04BF, 0x04C2, 0x04C4, 0x04C6, 0x04C8, 0x04CA, 0x04CC, 0x04CE, 0x04CF, 0x04D1, 0x04D3, 0x04D5, 0x04D7, 0x04D9, 0x04DB, 0x04DD, 0x04DF, 0x04E1, 0x04E3, 0x04E5, 0x04E7, 0x04E9, 0x04EB, 0x04ED, 0x04EF, 0x04F1, 0x04F3, 0x04F5, 0x04F7, 0x04F9, 0x04FB, 0x04FD, 0x04FF, 0x0501, 0x0503, 0x0505, 0x0507, 0x0509, 0x050B, 0x050D, 0x050F, 0x0511, 0x0513, 0x0515, 0x0517, 0x0519, 0x051B, 0x051D, 0x051F, 0x0521, 0x0523, 0x0525, 0x0527, 0x0529, 0x052B, 0x052D, 0x052F, '0561-0587', '13F8-13FD', '1C80-1C88', '1D00-1DBF', 0x1E01, 0x1E03, 0x1E05, 0x1E07, 0x1E09, 0x1E0B, 0x1E0D, 0x1E0F, 0x1E11, 0x1E13, 0x1E15, 0x1E17, 0x1E19, 0x1E1B, 0x1E1D, 0x1E1F, 0x1E21, 0x1E23, 0x1E25, 0x1E27, 0x1E29, 0x1E2B, 0x1E2D, 0x1E2F, 0x1E31, 0x1E33, 0x1E35, 0x1E37, 0x1E39, 0x1E3B, 0x1E3D, 0x1E3F, 0x1E41, 0x1E43, 0x1E45, 0x1E47, 0x1E49, 0x1E4B, 0x1E4D, 0x1E4F, 0x1E51, 0x1E53, 0x1E55, 0x1E57, 0x1E59, 0x1E5B, 0x1E5D, 0x1E5F, 0x1E61, 0x1E63, 0x1E65, 0x1E67, 0x1E69, 0x1E6B, 0x1E6D, 0x1E6F, 0x1E71, 0x1E73, 0x1E75, 0x1E77, 0x1E79, 0x1E7B, 0x1E7D, 0x1E7F, 0x1E81, 0x1E83, 0x1E85, 0x1E87, 0x1E89, 0x1E8B, 0x1E8D, 0x1E8F, 0x1E91, 0x1E93, '1E95-1E9D', 0x1E9F, 0x1EA1, 0x1EA3, 0x1EA5, 0x1EA7, 0x1EA9, 0x1EAB, 0x1EAD, 0x1EAF, 0x1EB1, 0x1EB3, 0x1EB5, 0x1EB7, 0x1EB9, 0x1EBB, 0x1EBD, 0x1EBF, 0x1EC1, 0x1EC3, 0x1EC5, 0x1EC7, 0x1EC9, 0x1ECB, 0x1ECD, 0x1ECF, 0x1ED1, 0x1ED3, 0x1ED5, 0x1ED7, 0x1ED9, 0x1EDB, 0x1EDD, 0x1EDF, 0x1EE1, 0x1EE3, 0x1EE5, 0x1EE7, 0x1EE9, 0x1EEB, 0x1EED, 0x1EEF, 0x1EF1, 0x1EF3, 0x1EF5, 0x1EF7, 0x1EF9, 0x1EFB, 0x1EFD, '1EFF-1F07', '1F10-1F15', '1F20-1F27', '1F30-1F37', '1F40-1F45', '1F50-1F57', '1F60-1F67', '1F70-1F7D', '1F80-1F87', '1F90-1F97', '1FA0-1FA7', '1FB0-1FB4', 0x1FB6, 0x1FB7, 0x1FBE, '1FC2-1FC4', 0x1FC6, 0x1FC7, '1FD0-1FD3', 0x1FD6, 0x1FD7, '1FE0-1FE7', '1FF2-1FF4', 0x1FF6, 0x1FF7, 0x2071, 0x207F, '2090-209C', 0x210A, 0x210E, 0x210F, 0x2113, 0x212F, 0x2134, 0x2139, 0x213C, 0x213D, '2146-2149', 0x214E, '2170-217F', 0x2184, '24D0-24E9', '2C30-2C5E', 0x2C61, 0x2C65, 0x2C66, 0x2C68, 0x2C6A, 0x2C6C, 0x2C71, 0x2C73, 0x2C74, '2C76-2C7D', 0x2C81, 0x2C83, 0x2C85, 0x2C87, 0x2C89, 0x2C8B, 0x2C8D, 0x2C8F, 0x2C91, 0x2C93, 0x2C95, 0x2C97, 0x2C99, 0x2C9B, 0x2C9D, 0x2C9F, 0x2CA1, 0x2CA3, 0x2CA5, 0x2CA7, 0x2CA9, 0x2CAB, 0x2CAD, 0x2CAF, 0x2CB1, 0x2CB3, 0x2CB5, 0x2CB7, 0x2CB9, 0x2CBB, 0x2CBD, 0x2CBF, 0x2CC1, 0x2CC3, 0x2CC5, 0x2CC7, 0x2CC9, 0x2CCB, 0x2CCD, 0x2CCF, 0x2CD1, 0x2CD3, 0x2CD5, 0x2CD7, 0x2CD9, 0x2CDB, 0x2CDD, 0x2CDF, 0x2CE1, 0x2CE3, 0x2CE4, 0x2CEC, 0x2CEE, 0x2CF3, '2D00-2D25', 0x2D27, 0x2D2D, 0xA641, 0xA643, 0xA645, 0xA647, 0xA649, 0xA64B, 0xA64D, 0xA64F, 0xA651, 0xA653, 0xA655, 0xA657, 0xA659, 0xA65B, 0xA65D, 0xA65F, 0xA661, 0xA663, 0xA665, 0xA667, 0xA669, 0xA66B, 0xA66D, 0xA681, 0xA683, 0xA685, 0xA687, 0xA689, 0xA68B, 0xA68D, 0xA68F, 0xA691, 0xA693, 0xA695, 0xA697, 0xA699, 'A69B-A69D', 0xA723, 0xA725, 0xA727, 0xA729, 0xA72B, 0xA72D, 'A72F-A731', 0xA733, 0xA735, 0xA737, 0xA739, 0xA73B, 0xA73D, 0xA73F, 0xA741, 0xA743, 0xA745, 0xA747, 0xA749, 0xA74B, 0xA74D, 0xA74F, 0xA751, 0xA753, 0xA755, 0xA757, 0xA759, 0xA75B, 0xA75D, 0xA75F, 0xA761, 0xA763, 0xA765, 0xA767, 0xA769, 0xA76B, 0xA76D, 'A76F-A778', 0xA77A, 0xA77C, 0xA77F, 0xA781, 0xA783, 0xA785, 0xA787, 0xA78C, 0xA78E, 0xA791, 'A793-A795', 0xA797, 0xA799, 0xA79B, 0xA79D, 0xA79F, 0xA7A1, 0xA7A3, 0xA7A5, 0xA7A7, 0xA7A9, 0xA7B5, 0xA7B7, 'A7F8-A7FA', 'AB30-AB5A', 'AB5C-AB65', 'AB70-ABBF', 'FB00-FB06', 'FB13-FB17', 'FF41-FF5A', '10428-1044F', '104D8-104FB', '10CC0-10CF2', '118C0-118DF', '1D41A-1D433', '1D44E-1D454', '1D456-1D467', '1D482-1D49B', '1D4B6-1D4B9', 0x1D4BB, '1D4BD-1D4C3', '1D4C5-1D4CF', '1D4EA-1D503', '1D51E-1D537', '1D552-1D56B', '1D586-1D59F', '1D5BA-1D5D3', '1D5EE-1D607', '1D622-1D63B', '1D656-1D66F', '1D68A-1D6A5', '1D6C2-1D6DA', '1D6DC-1D6E1', '1D6FC-1D714', '1D716-1D71B', '1D736-1D74E', '1D750-1D755', '1D770-1D788', '1D78A-1D78F', '1D7AA-1D7C2', '1D7C4-1D7C9', 0x1D7CB, '1E922-1E943'],  # noqa
    'Noncharacter_Code_Point': ['FDD0-FDEF', 0xFFFE, 0xFFFF, 0x1FFFE, 0x1FFFF, 0x2FFFE, 0x2FFFF, 0x3FFFE, 0x3FFFF, 0x4FFFE, 0x4FFFF, 0x5FFFE, 0x5FFFF, 0x6FFFE, 0x6FFFF, 0x7FFFE, 0x7FFFF, 0x8FFFE, 0x8FFFF, 0x9FFFE, 0x9FFFF, 0xAFFFE, 0xAFFFF, 0xBFFFE, 0xBFFFF, 0xCFFFE, 0xCFFFF, 0xDFFFE, 0xDFFFF, 0xEFFFE, 0xEFFFF, 0xFFFFE, 0xFFFFF, 0x10FFFE, 0x10FFFF],  # noqa
    'Uppercase': ['0041-005A', '00C0-00D6', '00D8-00DE', 0x0100, 0x0102, 0x0104, 0x0106, 0x0108, 0x010A, 0x010C, 0x010E, 0x0110, 0x0112, 0x0114, 0x0116, 0x0118, 0x011A, 0x011C, 0x011E, 0x0120, 0x0122, 0x0124, 0x0126, 0x0128, 0x012A, 0x012C, 0x012E, 0x0130, 0x0132, 0x0134, 0x0136, 0x0139, 0x013B, 0x013D, 0x013F, 0x0141, 0x0143, 0x0145, 0x0147, 0x014A, 0x014C, 0x014E, 0x0150, 0x0152, 0x0154, 0x0156, 0x0158, 0x015A, 0x015C, 0x015E, 0x0160, 0x0162, 0x0164, 0x0166, 0x0168, 0x016A, 0x016C, 0x016E, 0x0170, 0x0172, 0x0174, 0x0176, 0x0178, 0x0179, 0x017B, 0x017D, 0x0181, 0x0182, 0x0184, 0x0186, 0x0187, '0189-018B', '018E-0191', 0x0193, 0x0194, '0196-0198', 0x019C, 0x019D, 0x019F, 0x01A0, 0x01A2, 0x01A4, 0x01A6, 0x01A7, 0x01A9, 0x01AC, 0x01AE, 0x01AF, '01B1-01B3', 0x01B5, 0x01B7, 0x01B8, 0x01BC, 0x01C4, 0x01C7, 0x01CA, 0x01CD, 0x01CF, 0x01D1, 0x01D3, 0x01D5, 0x01D7, 0x01D9, 0x01DB, 0x01DE, 0x01E0, 0x01E2, 0x01E4, 0x01E6, 0x01E8, 0x01EA, 0x01EC, 0x01EE, 0x01F1, 0x01F4, '01F6-01F8', 0x01FA, 0x01FC, 0x01FE, 0x0200, 0x0202, 0x0204, 0x0206, 0x0208, 0x020A, 0x020C, 0x020E, 0x0210, 0x0212, 0x0214, 0x0216, 0x0218, 0x021A, 0x021C, 0x021E, 0x0220, 0x0222, 0x0224, 0x0226, 0x0228, 0x022A, 0x022C, 0x022E, 0x0230, 0x0232, 0x023A, 0x023B, 0x023D, 0x023E, 0x0241, '0243-0246', 0x0248, 0x024A, 0x024C, 0x024E, 0x0370, 0x0372, 0x0376, 0x037F, 0x0386, '0388-038A', 0x038C, 0x038E, 0x038F, '0391-03A1', '03A3-03AB', 0x03CF, '03D2-03D4', 0x03D8, 0x03DA, 0x03DC, 0x03DE, 0x03E0, 0x03E2, 0x03E4, 0x03E6, 0x03E8, 0x03EA, 0x03EC, 0x03EE, 0x03F4, 0x03F7, 0x03F9, 0x03FA, '03FD-042F', 0x0460, 0x0462, 0x0464, 0x0466, 0x0468, 0x046A, 0x046C, 0x046E, 0x0470, 0x0472, 0x0474, 0x0476, 0x0478, 0x047A, 0x047C, 0x047E, 0x0480, 0x048A, 0x048C, 0x048E, 0x0490, 0x0492, 0x0494, 0x0496, 0x0498, 0x049A, 0x049C, 0x049E, 0x04A0, 0x04A2, 0x04A4, 0x04A6, 0x04A8, 0x04AA, 0x04AC, 0x04AE, 0x04B0, 0x04B2, 0x04B4, 0x04B6, 0x04B8, 0x04BA, 0x04BC, 0x04BE, 0x04C0, 0x04C1, 0x04C3, 0x04C5, 0x04C7, 0x04C9, 0x04CB, 0x04CD, 0x04D0, 0x04D2, 0x04D4, 0x04D6, 0x04D8, 0x04DA, 0x04DC, 0x04DE, 0x04E0, 0x04E2, 0x04E4, 0x04E6, 0x04E8, 0x04EA, 0x04EC, 0x04EE, 0x04F0, 0x04F2, 0x04F4, 0x04F6, 0x04F8, 0x04FA, 0x04FC, 0x04FE, 0x0500, 0x0502, 0x0504, 0x0506, 0x0508, 0x050A, 0x050C, 0x050E, 0x0510, 0x0512, 0x0514, 0x0516, 0x0518, 0x051A, 0x051C, 0x051E, 0x0520, 0x0522, 0x0524, 0x0526, 0x0528, 0x052A, 0x052C, 0x052E, '0531-0556', '10A0-10C5', 0x10C7, 0x10CD, '13A0-13F5', 0x1E00, 0x1E02, 0x1E04, 0x1E06, 0x1E08, 0x1E0A, 0x1E0C, 0x1E0E, 0x1E10, 0x1E12, 0x1E14, 0x1E16, 0x1E18, 0x1E1A, 0x1E1C, 0x1E1E, 0x1E20, 0x1E22, 0x1E24, 0x1E26, 0x1E28, 0x1E2A, 0x1E2C, 0x1E2E, 0x1E30, 0x1E32, 0x1E34, 0x1E36, 0x1E38, 0x1E3A, 0x1E3C, 0x1E3E, 0x1E40, 0x1E42, 0x1E44, 0x1E46, 0x1E48, 0x1E4A, 0x1E4C, 0x1E4E, 0x1E50, 0x1E52, 0x1E54, 0x1E56, 0x1E58, 0x1E5A, 0x1E5C, 0x1E5E, 0x1E60, 0x1E62, 0x1E64, 0x1E66, 0x1E68, 0x1E6A, 0x1E6C, 0x1E6E, 0x1E70, 0x1E72, 0x1E74, 0x1E76, 0x1E78, 0x1E7A, 0x1E7C, 0x1E7E, 0x1E80, 0x1E82, 0x1E84, 0x1E86, 0x1E88, 0x1E8A, 0x1E8C, 0x1E8E, 0x1E90, 0x1E92, 0x1E94, 0x1E9E, 0x1EA0, 0x1EA2, 0x1EA4, 0x1EA6, 0x1EA8, 0x1EAA, 0x1EAC, 0x1EAE, 0x1EB0, 0x1EB2, 0x1EB4, 0x1EB6, 0x1EB8, 0x1EBA, 0x1EBC, 0x1EBE, 0x1EC0, 0x1EC2, 0x1EC4, 0x1EC6, 0x1EC8, 0x1ECA, 0x1ECC, 0x1ECE, 0x1ED0, 0x1ED2, 0x1ED4, 0x1ED6, 0x1ED8, 0x1EDA, 0x1EDC, 0x1EDE, 0x1EE0, 0x1EE2, 0x1EE4, 0x1EE6, 0x1EE8, 0x1EEA, 0x1EEC, 0x1EEE, 0x1EF0, 0x1EF2, 0x1EF4, 0x1EF6, 0x1EF8, 0x1EFA, 0x1EFC, 0x1EFE, '1F08-1F0F', '1F18-1F1D', '1F28-1F2F', '1F38-1F3F', '1F48-1F4D', 0x1F59, 0x1F5B, 0x1F5D, 0x1F5F, '1F68-1F6F', '1FB8-1FBB', '1FC8-1FCB', '1FD8-1FDB', '1FE8-1FEC', '1FF8-1FFB', 0x2102, 0x2107, '210B-210D', '2110-2112', 0x2115, '2119-211D', 0x2124, 0x2126, 0x2128, '212A-212D', '2130-2133', 0x213E, 0x213F, 0x2145, '2160-216F', 0x2183, '24B6-24CF', '2C00-2C2E', 0x2C60, '2C62-2C64', 0x2C67, 0x2C69, 0x2C6B, '2C6D-2C70', 0x2C72, 0x2C75, '2C7E-2C80', 0x2C82, 0x2C84, 0x2C86, 0x2C88, 0x2C8A, 0x2C8C, 0x2C8E, 0x2C90, 0x2C92, 0x2C94, 0x2C96, 0x2C98, 0x2C9A, 0x2C9C, 0x2C9E, 0x2CA0, 0x2CA2, 0x2CA4, 0x2CA6, 0x2CA8, 0x2CAA, 0x2CAC, 0x2CAE, 0x2CB0, 0x2CB2, 0x2CB4, 0x2CB6, 0x2CB8, 0x2CBA, 0x2CBC, 0x2CBE, 0x2CC0, 0x2CC2, 0x2CC4, 0x2CC6, 0x2CC8, 0x2CCA, 0x2CCC, 0x2CCE, 0x2CD0, 0x2CD2, 0x2CD4, 0x2CD6, 0x2CD8, 0x2CDA, 0x2CDC, 0x2CDE, 0x2CE0, 0x2CE2, 0x2CEB, 0x2CED, 0x2CF2, 0xA640, 0xA642, 0xA644, 0xA646, 0xA648, 0xA64A, 0xA64C, 0xA64E, 0xA650, 0xA652, 0xA654, 0xA656, 0xA658, 0xA65A, 0xA65C, 0xA65E, 0xA660, 0xA662, 0xA664, 0xA666, 0xA668, 0xA66A, 0xA66C, 0xA680, 0xA682, 0xA684, 0xA686, 0xA688, 0xA68A, 0xA68C, 0xA68E, 0xA690, 0xA692, 0xA694, 0xA696, 0xA698, 0xA69A, 0xA722, 0xA724, 0xA726, 0xA728, 0xA72A, 0xA72C, 0xA72E, 0xA732, 0xA734, 0xA736, 0xA738, 0xA73A, 0xA73C, 0xA73E, 0xA740, 0xA742, 0xA744, 0xA746, 0xA748, 0xA74A, 0xA74C, 0xA74E, 0xA750, 0xA752, 0xA754, 0xA756, 0xA758, 0xA75A, 0xA75C, 0xA75E, 0xA760, 0xA762, 0xA764, 0xA766, 0xA768, 0xA76A, 0xA76C, 0xA76E, 0xA779, 0xA77B, 0xA77D, 0xA77E, 0xA780, 0xA782, 0xA784, 0xA786, 0xA78B, 0xA78D, 0xA790, 0xA792, 0xA796, 0xA798, 0xA79A, 0xA79C, 0xA79E, 0xA7A0, 0xA7A2, 0xA7A4, 0xA7A6, 0xA7A8, 'A7AA-A7AE', 'A7B0-A7B4', 0xA7B6, 'FF21-FF3A', '10400-10427', '104B0-104D3', '10C80-10CB2', '118A0-118BF', '1D400-1D419', '1D434-1D44D', '1D468-1D481', 0x1D49C, 0x1D49E, 0x1D49F, 0x1D4A2, 0x1D4A5, 0x1D4A6, '1D4A9-1D4AC', '1D4AE-1D4B5', '1D4D0-1D4E9', 0x1D504, 0x1D505, '1D507-1D50A', '1D50D-1D514', '1D516-1D51C', 0x1D538, 0x1D539, '1D53B-1D53E', '1D540-1D544', 0x1D546, '1D54A-1D550', '1D56C-1D585', '1D5A0-1D5B9', '1D5D4-1D5ED', '1D608-1D621', '1D63C-1D655', '1D670-1D689', '1D6A8-1D6C0', '1D6E2-1D6FA', '1D71C-1D734', '1D756-1D76E', '1D790-1D7A8', 0x1D7CA, '1E900-1E921', '1F130-1F149', '1F150-1F169', '1F170-1F189'],  # noqa
=================
1214496
count:1
    Take a command (either a single command or list of arguments) and return
    the environment created after running that command. Note that the command
    must be a batch (``.bat``) file or ``.cmd`` file, or the changes to the
    environment will not be captured.

    If ``initial_env`` is supplied, it is used as the initial environment
    passed to the child process. (Otherwise, this process's ``os.environ()``
    will be used by default.)

    From https://stackoverflow.com/questions/1214496/how-to-get-environment-from-a-subprocess-in-python,
    with decoding bug fixed for Python 3.

    PURPOSE: under Windows, ``VCVARSALL.BAT`` sets up a lot of environment
    variables to compile for a specific target architecture. We want to be able
    to read them, not to replicate its work.
    
    METHOD: create a composite command that executes the specified command, 
    then echoes an unusual string tag, then prints the environment via ``SET``;
    capture the output, work out what came from ``SET``.

=================
34124636
count:1
            if not in_quote:
                return True
    return False


def contains_unquoted_ampersand_dangerous_to_windows(x: str) -> bool:
    """
    Under Windows, if an ampersand is in a path and is not quoted, it'll break
    lots of things.
    See https://stackoverflow.com/questions/34124636.
    Simple example:

    .. code-block:: bat

        set RUBBISH=a & b           # 'b' is not recognizable as a... command
        set RUBBISH='a & b'         # 'b'' is not recognizable as a... command
        set RUBBISH="a & b"         # OK

    ... and you get similar knock-on effects, e.g. if you set RUBBISH using the
    Control Panel to the literal
=================
2953462
count:1
**Network support functions.**

NOTES:

- ``ping`` requires root authority to create ICMP sockets in Linux
- the ``/bin/ping`` command doesn't need prior root authority (because it has
  the setuid bit set)
- For Linux, it's therefore best to use the system ``ping``.

http://stackoverflow.com/questions/2953462/pinging-servers-in-python
http://stackoverflow.com/questions/316866/ping-a-site-in-python

- Note that if you want a sub-second timeout, things get trickier.
  One option is ``fping``.

"""

import os
import ssl
import subprocess
=================
316866
count:1

NOTES:

- ``ping`` requires root authority to create ICMP sockets in Linux
- the ``/bin/ping`` command doesn't need prior root authority (because it has
  the setuid bit set)
- For Linux, it's therefore best to use the system ``ping``.

http://stackoverflow.com/questions/2953462/pinging-servers-in-python
http://stackoverflow.com/questions/316866/ping-a-site-in-python

- Note that if you want a sub-second timeout, things get trickier.
  One option is ``fping``.

"""

import os
import ssl
import subprocess
import sys
=================
27804710
count:1
    """
    log.info("Downloading from {} to {}", url, filename)

    # urllib.request.urlretrieve(url, filename)
    # ... sometimes fails (e.g. downloading
    # https://www.openssl.org/source/openssl-1.1.0g.tar.gz under Windows) with:
    # ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:777)  # noqa
    # ... due to this certificate root problem (probably because OpenSSL
    #     [used by Python] doesn't play entirely by the same rules as others?):
    # https://stackoverflow.com/questions/27804710
    # So:

    ctx = ssl.create_default_context()  # type: ssl.SSLContext
    if skip_cert_verify:
        log.debug("Skipping SSL certificate check for " + url)
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    with urllib.request.urlopen(url, context=ctx) as u, open(filename,
                                                             'wb') as f:  # noqa
        f.write(u.read())
=================
530526
count:1
    return html.escape(value) if value is not None else None


def get_cgi_fieldstorage_from_wsgi_env(
        env: Dict[str, str],
        include_query_string: bool = True) -> cgi.FieldStorage:
    """
    Returns a :class:`cgi.FieldStorage` object from the WSGI environment.
    """
    # http://stackoverflow.com/questions/530526/accessing-post-data-from-wsgi
    post_env = env.copy()
    if not include_query_string:
        post_env['QUERY_STRING'] = ''
    form = cgi.FieldStorage(
        fp=env['wsgi.input'],
        environ=post_env,
        keep_blank_values=True
    )
    return form

=================
151079
count:1
        get_png_data_url(blob)
    )


# =============================================================================
# HTTP results
# =============================================================================

# Also, filenames:
#   http://stackoverflow.com/questions/151079
#   http://greenbytes.de/tech/tc2231/#inlwithasciifilenamepdf

def pdf_result(pdf_binary: bytes,
               extraheaders: TYPE_WSGI_RESPONSE_HEADERS = None,
               filename: str = None) -> WSGI_TUPLE_TYPE:
    """
    Returns ``(contenttype, extraheaders, data)`` tuple for a PDF.
    """
    extraheaders = extraheaders or []
    if filename:
=================
1061697
count:1
        v = str(v)
    return html.escape(v).replace("\n", nl).replace("\\n", nl)


def websafe(value: str) -> str:
    """
    Makes a string safe for inclusion in ASCII-encoded HTML.
    """
    return html.escape(value).encode('ascii', 'xmlcharrefreplace')
    # http://stackoverflow.com/questions/1061697


def replace_nl_with_html_br(string: str) -> str:
    """
    Replaces newlines with ``<br>``.
    """
    return _NEWLINE_REGEX.sub("<br>", string)


def bold_if_not_blank(x: Optional[str]) -> str:
=================
1071191
count:1
    return f"<b>{x}</b>"


def make_urls_hyperlinks(text: str) -> str:
    """
    Adds hyperlinks to text that appears to contain URLs.

    See

    - http://stackoverflow.com/questions/1071191

      - ... except that double-replaces everything; e.g. try with
        ``text = "me@somewhere.com me@somewhere.com"``

    - http://stackp.online.fr/?p=19
    """
    find_url = r'''
        (?x)(              # verbose identify URLs within text
        (http|ftp|gopher)  # make sure we find a resource type
        ://                # ...needs to be followed by colon-slash-slash
=================
10397968
count:1
        (/?|               # could be just the domain name (maybe w/ slash)
        [^ \n\r"]+         # or stuff then space, newline, tab, quote
        [\w/])             # resource name ends in alphanumeric or slash
        (?=[\s\.,>)'"\]])  # assert: followed by white or clause ending
        )                  # end of match group
    '''
    replace_url = r'<a href="\1">\1</a>'
    find_email = re.compile(r'([.\w\-]+@(\w[\w\-]+\.)+[\w\-]+)')
    # '.' doesn't need escaping inside square brackets
    # https://stackoverflow.com/questions/10397968/escape-dot-in-a-regex-range
    replace_email = r'<a href="mailto:\1">\1</a>'
    text = re.sub(find_url, replace_url, text)
    text = re.sub(find_email, replace_email, text)
    return text


# noinspection PyShadowingNames
def html_table_from_query(rows: Iterable[Iterable[Optional[str]]],
                          descriptions: Iterable[Optional[str]]) -> str:
    """
=================
1883980
count:1
    Finds the position of *n*\ th occurrence of ``x`` in ``s``, or ``-1`` if
    there isn't one.

    - The ``n`` parameter is zero-based (i.e. 0 for the first, 1 for the
      second...).
    - If ``overlap`` is true, allows fragments to overlap. If not, they must be
      distinct.
      
    As per
    https://stackoverflow.com/questions/1883980/find-the-nth-occurrence-of-substring-in-a-string 
    """  # noqa
    length_of_fragment = 1 if overlap else len(x)
    i = -length_of_fragment
    for _ in range(n + 1):
        i = s.find(x, i + length_of_fragment)
        if i < 0:
            break
    return i


=================
9475241
count:1

# =============================================================================
# Splitting
# =============================================================================

def split_string(x: str, n: int) -> List[str]:
    """
    Split string into chunks of length n
    """
    # https://stackoverflow.com/questions/9475241/split-string-every-nth-character  # noqa
    return [x[i:i+n] for i in range(0, len(x), n)]


# =============================================================================
# Replacement
# =============================================================================

def multiple_replace(text: str, rep: Dict[str, str]) -> str:
    """
    Returns a version of ``text`` in which the keys of ``rep`` (a dict) have
=================
6116978
count:1
# Replacement
# =============================================================================

def multiple_replace(text: str, rep: Dict[str, str]) -> str:
    """
    Returns a version of ``text`` in which the keys of ``rep`` (a dict) have
    been replaced by their values.

    As per
    http://stackoverflow.com/questions/6116978/python-replace-multiple-strings.
    """
    rep = dict((re.escape(k), v) for k, v in rep.items())
    pattern = re.compile("|".join(rep.keys()))
    return pattern.sub(lambda m: rep[re.escape(m.group(0))], text)


def replace_in_list(stringlist: Iterable[str],
                    replacedict: Dict[str, str]) -> List[str]:
    """
    Returns a list produced by applying :func:`multiple_replace` to every
=================
1207457
count:1

# =============================================================================
# Mangling to ASCII
# =============================================================================

def mangle_unicode_to_ascii(s: Any) -> str:
    """
    Mangle unicode to ASCII, losing accents etc. in the process.
    """
    # http://stackoverflow.com/questions/1207457
    if s is None:
        return ""
    if not isinstance(s, str):
        s = str(s)
    return (
        unicodedata.normalize('NFKD', s)
                   .encode('ascii', 'ignore')  # gets rid of accents
                   .decode('ascii')  # back to a string
    )

=================
30254739
count:1
        bd[80]  # 'high'
        bd[50]  # 'medium'
        bd[-5]  # raises KeyError
    
    Various implementation alternatives:
    
    - http://joshuakugler.com/archives/30-BetweenDict,-a-Python-dict-for-value-ranges.html
      ... NB has initialization default argument bug
    - https://pypi.python.org/pypi/rangedict/0.1.5
    - http://stackoverflow.com/questions/30254739/is-there-a-library-implemented-rangedict-in-python
    """  # noqa
    INVALID_MSG_TYPE = "Key must be an iterable with length 2"
    INVALID_MSG_VALUE = "First element of key must be less than second element"

    # noinspection PyMissingConstructor
    def __init__(self, d: Dict = None) -> None:
        d = d or {}
        for k, v in d.items():
            self[k] = v

=================
42980201
count:1
    crashing with ``ValueError: math domain error``.

    Args:
        x: parameter

    Returns:
        float: ln(x), the natural logarithm of x

    See
    https://stackoverflow.com/questions/42980201/logarithm-of-zero-in-python.

    For speed, use ``from math import log as math_log``, etc.:

    .. code-block: python

        import math
        from math import log as math_log
        import timeit
        INFINITY = math.inf
        MINUS_INFINITY = -math.inf
=================
42980201
count:1
    crashing with ``ValueError: math domain error``.

    Args:
        x: parameter

    Returns:
        float: log10(x), the logarithm to base 10 of x

    See
    https://stackoverflow.com/questions/42980201/logarithm-of-zero-in-python.
    """
    return math_log10(x) if x != 0 else MINUS_INFINITY


# =============================================================================
# Basic probability
# =============================================================================

def odds_from_probability(p: float) -> float:
    r"""
=================
9157210
count:1
# =============================================================================
# Exception handling
# =============================================================================

def add_info_to_exception(err: Exception, info: Dict) -> None:
    """
    Adds an information dictionary to an exception.
    
    See
    http://stackoverflow.com/questions/9157210/how-do-i-raise-the-same-exception-with-a-custom-message-in-python
    
    Args:
        err: the exception to be modified
        info: the information to add
    """  # noqa
    if not err.args:
        err.args = ('', )
    err.args += (info, )


=================
9555133
count:1


def die(exc: Exception = None, exit_code: int = 1) -> None:
    """
    It is not clear that Python guarantees to exit with a non-zero exit code
    (errorlevel in DOS/Windows) upon an unhandled exception. So this function
    produces the usual stack trace then dies with the specified exit code.

    See
    http://stackoverflow.com/questions/9555133/e-printstacktrace-equivalent-in-python.

    Test code:
    
    .. code-block:: python

        import logging
        import sys
        import traceback
        logging.basicConfig(level=logging.DEBUG)
        log = logging.getLogger()
=================
22094852
count:1
                'print_good': args.good,
                'delete_if_bad': args.delete_if_bad,
            }
            # log.critical("start")
            pool.apply_async(process_openxml_file, [], kwargs)
            # result = pool.apply_async(process_file, [], kwargs)
            # result.get()  # will re-raise any child exceptions
            # ... but it waits for the process to complete! That's no help.
            # log.critical("next")
            # ... https://stackoverflow.com/questions/22094852/how-to-catch-exceptions-in-workers-in-multiprocessing  # noqa
        pool.close()
        pool.join()

        log.debug("Finished scan.")
        if args.run_repeatedly is None:
            break
        log.info("Sleeping for {} s...", args.run_repeatedly)
        sleep(args.run_repeatedly)


=================
19924104
count:1
                log.info("Deleting: " + filename)
                os.remove(filename)
    except Exception as e:
        # Must explicitly catch and report errors, since otherwise they vanish
        # into the ether.
        log.critical("Uncaught error in subprocess: {!r}\n{}", e,
                     traceback.format_exc())
        raise
        # See also good advice, not implemented here, at
        # https://stackoverflow.com/questions/19924104/python-multiprocessing-handling-child-errors-in-parent  # noqa
        # https://stackoverflow.com/questions/6126007/python-getting-a-traceback-from-a-multiprocessing-process/26096355#26096355  # noqa
    # log.critical("process_file: end")


def main() -> None:
    """
    Command-line handler for the ``find_recovered_openxml`` tool.
    Use the ``--help`` option for help.
    """
    parser = ArgumentParser(
=================
26096355
count:1
                os.remove(filename)
    except Exception as e:
        # Must explicitly catch and report errors, since otherwise they vanish
        # into the ether.
        log.critical("Uncaught error in subprocess: {!r}\n{}", e,
                     traceback.format_exc())
        raise
        # See also good advice, not implemented here, at
        # https://stackoverflow.com/questions/19924104/python-multiprocessing-handling-child-errors-in-parent  # noqa
        # https://stackoverflow.com/questions/6126007/python-getting-a-traceback-from-a-multiprocessing-process/26096355#26096355  # noqa
    # log.critical("process_file: end")


def main() -> None:
    """
    Command-line handler for the ``find_recovered_openxml`` tool.
    Use the ``--help`` option for help.
    """
    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
=================
22094852
count:1
                    args.delete_if_not_specified_file_type,
                'show_zip_output': args.show_zip_output,
            }
            # log.critical("start")
            pool.apply_async(process_file, [], kwargs)
            # result = pool.apply_async(process_file, [], kwargs)
            # result.get()  # will re-raise any child exceptions
            # ... but it waits for the process to complete! That's no help.
            # log.critical("next")
            # ... https://stackoverflow.com/questions/22094852/how-to-catch-exceptions-in-workers-in-multiprocessing  # noqa
        pool.close()
        pool.join()

        log.info("Finished scan.")
        if args.run_repeatedly is None:
            break
        log.info("Sleeping for {} s...", args.run_repeatedly)
        sleep(args.run_repeatedly)


=================
1230669
count:1
# (via subprocess) can leave orphans.
# =============================================================================

def kill_proc_tree(pid: int,
                   including_parent: bool = True,
                   timeout_s: float = 5) \
        -> Tuple[Set[psutil.Process], Set[psutil.Process]]:
    """
    Kills a tree of processes, starting with the parent. Slightly modified from
    https://stackoverflow.com/questions/1230669/subprocess-deleting-child-processes-in-windows.
    
    Args:
        pid: process ID of the parent
        including_parent: kill the parent too?
        timeout_s: timeout to wait for processes to close

    Returns:
        tuple: ``(gone, still_alive)``, where both are sets of
        :class:`psutil.Process` objects

=================
34458583
count:1
# =============================================================================

def nice_call(*popenargs, timeout: float = None,
              cleanup_timeout: float = None, **kwargs) -> int:
    """
    Like :func:`subprocess.call`, but give the child process time to
    clean up and communicate if a :exc:`KeyboardInterrupt` is raised.
    
    Modified from
    https://stackoverflow.com/questions/34458583/python-subprocess-call-doesnt-handle-signal-correctly
    """  # noqa
    with subprocess.Popen(*popenargs, **kwargs) as p:
        try:
            return p.wait(timeout=timeout)
        except KeyboardInterrupt:
            log.error("KeyboardInterrupt received")
            if cleanup_timeout:
                # Wait again, now that the child has received SIGINT, too.
                log.info(f"Waiting {cleanup_timeout} seconds "
                         f"for child process {p.pid} to finish...")
=================
17602878
count:1
@contextmanager
def smart_open(filename: str, mode: str = 'Ur', buffering: int = -1,
               encoding: str = None, errors: str = None, newline: str = None,
               closefd: bool = True) -> IO:
    """
    Context manager (for use with ``with``) that opens a filename and provides
    a :class:`IO` object. If the filename is ``'-'``, however, then
    ``sys.stdin`` is used for reading and ``sys.stdout`` is used for writing.
    """
    # https://stackoverflow.com/questions/17602878/how-to-handle-both-with-open-and-sys-stdout-nicely  # noqa
    # https://stackoverflow.com/questions/1744989/read-from-file-or-stdin/29824059#29824059  # noqa
    if filename == '-':
        if mode is None or mode == '' or 'r' in mode:
            fh = sys.stdin
        else:
            fh = sys.stdout
    else:
        fh = open(filename, mode=mode,
                  buffering=buffering, encoding=encoding, errors=errors,
                  newline=newline, closefd=closefd)
=================
29824059
count:1
def smart_open(filename: str, mode: str = 'Ur', buffering: int = -1,
               encoding: str = None, errors: str = None, newline: str = None,
               closefd: bool = True) -> IO:
    """
    Context manager (for use with ``with``) that opens a filename and provides
    a :class:`IO` object. If the filename is ``'-'``, however, then
    ``sys.stdin`` is used for reading and ``sys.stdout`` is used for writing.
    """
    # https://stackoverflow.com/questions/17602878/how-to-handle-both-with-open-and-sys-stdout-nicely  # noqa
    # https://stackoverflow.com/questions/1744989/read-from-file-or-stdin/29824059#29824059  # noqa
    if filename == '-':
        if mode is None or mode == '' or 'r' in mode:
            fh = sys.stdin
        else:
            fh = sys.stdout
    else:
        fh = open(filename, mode=mode,
                  buffering=buffering, encoding=encoding, errors=errors,
                  newline=newline, closefd=closefd)
    try:
=================
13730107
count:1
    """
    fileobj.write(line + '\n')


def writelines_nl(fileobj: TextIO, lines: Iterable[str]) -> None:
    """
    Writes lines, plus terminating newline characters, to the file.

    (Since :func:`fileobj.writelines` doesn't add newlines...
    http://stackoverflow.com/questions/13730107/writelines-writes-lines-without-newline-just-fills-the-file)
    """  # noqa
    fileobj.write('\n'.join(lines) + '\n')


def write_text(filename: str, text: str) -> None:
    """
    Writes text to a file.
    """
    with open(filename, 'w') as f:  # type: TextIO
        print(text, file=f)
=================
25728472
count:1
def write_gzipped_text(basefilename: str, text: str) -> None:
    """
    Writes text to a file compressed with ``gzip`` (a ``.gz`` file).
    The filename is used directly for the "inner" file and the extension
    ``.gz`` is appended to the "outer" (zipped) file's name.
    
    This function exists primarily because Lintian wants non-timestamped gzip
    files, or it complains:
    - https://lintian.debian.org/tags/package-contains-timestamped-gzip.html
    - See http://stackoverflow.com/questions/25728472/python-gzip-omit-the-original-filename-and-timestamp
    """  # noqa
    zipfilename = basefilename + '.gz'
    compresslevel = 9
    mtime = 0
    with open(zipfilename, 'wb') as f:
        with gzip.GzipFile(basefilename, 'wb', compresslevel, f, mtime) as gz:
            with io.TextIOWrapper(gz) as tw:
                tw.write(text)


=================
12821961
count:1

    Args:
        zipfilenames_or_files: iterable of filenames or :class:`BinaryIO`
            file-like objects, giving the ``.zip`` files
        filespec: filespec to filter the "inner" files against
        on_disk: if ``True``, extracts inner files to disk yields file-like
            objects that access disk files (and are therefore seekable); if
            ``False``, extracts them in memory and yields file-like objects to
            those memory files (which will not be seekable; e.g.
            https://stackoverflow.com/questions/12821961/)

    Yields:
        file-like object for each inner file matching ``filespec``; may be
        in memory or on disk, as per ``on_disk``

    """
    for zipfilename_or_file in zipfilenames_or_files:
        with zipfile.ZipFile(zipfilename_or_file) as zf:
            infolist = zf.infolist()  # type: List[zipfile.ZipInfo]
            infolist.sort(key=attrgetter('filename'))
=================
12821961
count:1
                log.debug("Reading subfile {}", zipinfo.filename)
                if on_disk:
                    with tempfile.TemporaryDirectory() as tmpdir:
                        zf.extract(zipinfo.filename, tmpdir)
                        diskfilename = os.path.join(tmpdir, zipinfo.filename)
                        with open(diskfilename, 'rb') as subfile:
                            yield subfile
                else:
                    # Will not be seekable; e.g.
                    # https://stackoverflow.com/questions/12821961/
                    with zf.open(zipinfo.filename) as subfile:
                        yield subfile


def gen_part_from_line(lines: Iterable[str],
                       part_index: int,
                       splitter: str = None) -> Generator[str, None, None]:
    """
    Splits lines with ``splitter`` and yields a specified part by index.

=================
12771480
count:1
    Args:
        iterables: iterable of anything
        part_index: part index

    Yields:
        ``item[part_index] for item in iterable``

    """
    # RST: make part of word bold/italic:
    # https://stackoverflow.com/questions/12771480/part-of-a-word-bold-in-restructuredtext  # noqa
    for iterable in iterables:
        yield iterable[part_index]


def gen_rows_from_csv_binfiles(
        csv_files: Iterable[BinaryIO],
        encoding: str = UTF8,
        skip_header: bool = False,
        **csv_reader_kwargs) -> Generator[Iterable[str], None, None]:
    """
=================
3647692
count:1
# bool
# =============================================================================

def is_false(x: Any) -> bool:
    """
    Positively false? Evaluates: ``not x and x is not None``.
    """
    # beware: "0 is False" evaluates to False -- AVOID "is False"!
    # ... but "0 == False" evaluates to True
    # http://stackoverflow.com/questions/3647692/
    # ... but comparisons to booleans with "==" fail PEP8:
    # http://legacy.python.org/dev/peps/pep-0008/
    # ... so use e.g. "bool(x)" or "x" or "not x"
    # http://google-styleguide.googlecode.com/svn/trunk/pyguide.html?showone=True/False_evaluations#True/False_evaluations  # noqa
=================
3365740
count:1
    Args:
        package: package (name or actual module)
        base_package_for_relative_import: path to prepend?
        recursive: import submodules too?

    Returns:
        dict: mapping from full module name to module

    """
    # http://stackoverflow.com/questions/3365740/how-to-import-all-submodules
    if isinstance(package, str):
        package = importlib.import_module(package,
                                          base_package_for_relative_import)
    results = {}
    for loader, name, is_pkg in pkgutil.walk_packages(package.__path__):
        full_name = package.__name__ + '.' + name
        log.debug("importing: {}", full_name)
        results[full_name] = importlib.import_module(full_name)
        if recursive and is_pkg:
            results.update(import_submodules(full_name))
=================
20339053
count:1

def is_module_a_package(module: ModuleType) -> bool:
    assert inspect.ismodule(module)
    return os.path.basename(inspect.getfile(module)) == "__init__.py"


def is_c_extension(module: ModuleType) -> bool:
    """
    Modified from
    https://stackoverflow.com/questions/20339053/in-python-how-can-one-tell-if-a-module-comes-from-a-c-extension.
    
    ``True`` only if the passed module is a C extension implemented as a
    dynamically linked shared library specific to the current platform.

    Args:
        module: Previously imported module object to be tested.

    Returns:
        bool: ``True`` only if this module is a C extension.
        
=================
3365740
count:1
            return True

    if import_all_submodules:
        if not is_module_a_package(module):
            log.debug("Top-level module is not a package: {!r}", module)
            return False

        # Otherwise, for things like Django, we need to recurse in a different
        # way to scan everything.
        # See https://stackoverflow.com/questions/3365740/how-to-import-all-submodules.  # noqa
        log.debug("Walking path: {!r}", top_path)
        # noinspection PyBroadException
        try:
            for loader, module_name, is_pkg in pkgutil.walk_packages([top_path]):  # noqa
                if not is_pkg:
                    log.debug("Skipping, not a package: {!r}", module_name)
                    continue
                log.debug("Manually importing: {!r}", module_name)
                # noinspection PyBroadException
                try:
=================
20638040
count:1
        Args:
            filename: filename
            globtext: glob

        Returns:
            does the filename match the glob?

        See also:

        - https://stackoverflow.com/questions/20638040/glob-exclude-pattern

        """
        # Quick check on basename-only matching
        if fnmatch(filename, globtext):
            log.debug("{!r} matches {!r}", filename, globtext)
            return True
        bname = basename(filename)
        if fnmatch(bname, globtext):
            log.debug("{!r} matches {!r}", bname, globtext)
            return True
=================
1776994
count:1

from typing import Generator, List, Type, TypeVar


# =============================================================================
# Does a derived class implement a method?
# =============================================================================

"""
http://stackoverflow.com/questions/1776994
https://docs.python.org/3/library/inspect.html
https://github.com/edoburu/django-fluent-contents/issues/43
https://bytes.com/topic/python/answers/843424-python-2-6-3-0-determining-if-method-inherited  # noqa
https://docs.python.org/3/reference/datamodel.html

In Python 2, you can do this:
    return derived_method.__func__ != base_method.__func__
In Python 3.4:
    ...

=================
3862310
count:1
    #     return derived_method.__func__ != base_method.__func__
    # else:
    #     return derived_method is not base_method
    return derived_method is not base_method


# =============================================================================
# Subclasses
# =============================================================================
# https://stackoverflow.com/questions/3862310/how-can-i-find-all-subclasses-of-a-class-given-its-name  # noqa

def gen_all_subclasses(cls: Type) -> Generator[Type, None, None]:
    """
    Generates all subclasses of a class.

    Args:
        cls: a class

    Yields:
        all subclasses
=================
128573
count:1
# Class properties
# =============================================================================

class ClassProperty(property):
    """
    One way to mark a function as a class property (logically, a combination of
    ``@classmethod`` and ``@property``).

    See
    https://stackoverflow.com/questions/128573/using-property-on-classmethods.

    However, in practice we use :class:`classproperty`, a slightly different
    version.
    """
    # https://stackoverflow.com/questions/128573/using-property-on-classmethods
    # noinspection PyMethodOverriding
    def __get__(self, cls, owner):
        # noinspection PyUnresolvedReferences
        return self.fget.__get__(None, owner)()

=================
128573
count:1
    One way to mark a function as a class property (logically, a combination of
    ``@classmethod`` and ``@property``).

    See
    https://stackoverflow.com/questions/128573/using-property-on-classmethods.

    However, in practice we use :class:`classproperty`, a slightly different
    version.
    """
    # https://stackoverflow.com/questions/128573/using-property-on-classmethods
    # noinspection PyMethodOverriding
    def __get__(self, cls, owner):
        # noinspection PyUnresolvedReferences
        return self.fget.__get__(None, owner)()


# noinspection PyPep8Naming
class classproperty(object):
    """
    Decorator to mark a function as a class property (logically, a combination
=================
128573
count:1


# noinspection PyPep8Naming
class classproperty(object):
    """
    Decorator to mark a function as a class property (logically, a combination
    of ``@classmethod`` and ``@property``).

    See
    https://stackoverflow.com/questions/128573/using-property-on-classmethods
    """
    def __init__(self, fget):
        self.fget = fget

    def __get__(self, owner_self, owner_cls):
=================
27803059
count:1
import contextlib


@contextlib.contextmanager
def dummy_context_mgr():
    """
    We might be using Python 3.6 which doesn't have ``contextlib.nullcontext``.
    Hence this.

    - https://stackoverflow.com/questions/27803059/conditional-with-statement-in-python
    - See also
      https://stackoverflow.com/questions/893333/multiple-variables-in-a-with-statement
    """  # noqa
=================
893333
count:1

@contextlib.contextmanager
def dummy_context_mgr():
    """
    We might be using Python 3.6 which doesn't have ``contextlib.nullcontext``.
    Hence this.

    - https://stackoverflow.com/questions/27803059/conditional-with-statement-in-python
    - See also
      https://stackoverflow.com/questions/893333/multiple-variables-in-a-with-statement
    """  # noqa
=================
38987
count:1
            return key
    return None


def merge_dicts(*dict_args: Dict) -> Dict:
    """
    Given any number of dicts, shallow-copy them and merge into a new dict.
    Precedence goes to key/value pairs in dicts that are later in the list.

    See http://stackoverflow.com/questions/38987.
    """
    result = {}
    for dictionary in dict_args:
        result.update(dictionary)
    return result


def merge_two_dicts(x: Dict, y: Dict) -> Dict:
    """
    Given two dicts, merge them into a new dict as a shallow copy, e.g.
=================
38987
count:1

        z = merge_two_dicts(x, y)

    If you can guarantee Python 3.5, then a simpler syntax is:

    .. code-block:: python

        z = {**x, **y}

    See http://stackoverflow.com/questions/38987.
    """
    z = x.copy()
    z.update(y)
    return z


def rename_key(d: Dict[str, Any], old: str, new: str) -> None:
    """
    Rename a key in dictionary ``d`` from ``old`` to ``new``, in place.
    """
=================
4406501
count:1
    """
    Renames, IN PLACE, the keys in ``d`` according to the mapping in
    ``renames``.
    
    Args:
        d: a dictionary to modify 
        renames: a dictionary of the format ``{old_key_name: new_key_name}``
        
    See
    https://stackoverflow.com/questions/4406501/change-the-name-of-a-key-in-dictionary.
    """  # noqa
    for old_key, new_key in renames.items():
        if new_key == old_key:
            continue
        if old_key in d:
            if new_key in d:
                raise ValueError(
                    f"rename_keys_in_dict: renaming {old_key!r} -> "
                    f"{new_key!r} but new key already exists")
            d[new_key] = d.pop(old_key)
=================
6777485
count:1
                            null_literals: List[Any]) -> None:
    """
    Within ``d`` (in place), replace any values found in ``null_literals`` with
    ``None``.
    """
    if not null_literals:
        return
    # DO NOT add/delete values to/from a dictionary during iteration, but it
    # is OK to modify existing keys:
    #       https://stackoverflow.com/questions/6777485
    #       https://stackoverflow.com/questions/2315520
    #       https://docs.python.org/3/library/stdtypes.html#dict-views
    for k, v in d.items():
        if v in null_literals:
            d[k] = None


# noinspection PyPep8
def map_keys_to_values(keys: List[Any], d: Dict[Any, Any], default: Any = None,
                       raise_if_missing: bool = False,
=================
2315520
count:1
    """
    Within ``d`` (in place), replace any values found in ``null_literals`` with
    ``None``.
    """
    if not null_literals:
        return
    # DO NOT add/delete values to/from a dictionary during iteration, but it
    # is OK to modify existing keys:
    #       https://stackoverflow.com/questions/6777485
    #       https://stackoverflow.com/questions/2315520
    #       https://docs.python.org/3/library/stdtypes.html#dict-views
    for k, v in d.items():
        if v in null_literals:
            d[k] = None


# noinspection PyPep8
def map_keys_to_values(keys: List[Any], d: Dict[Any, Any], default: Any = None,
                       raise_if_missing: bool = False,
                       omit_if_missing: bool = False) -> List[Any]:
=================
17532929
count:1
# Lazy dictionaries
# =============================================================================

class LazyDict(dict):
    """
    A dictionary that only evaluates the argument to :func:`setdefault` or
    :func:`get` if it needs to.
    
    See
    https://stackoverflow.com/questions/17532929/how-to-implement-a-lazy-setdefault.
    
    The ``*args``/``**kwargs`` parts are useful, but we don't want to have to
    name 'thunk' explicitly.
    """  # noqa
    def get(self, key: Hashable, thunk: Any = None,
            *args: Any, **kwargs: Any) -> Any:
        if key in self:
            return self[key]
        elif callable(thunk):
            return thunk(*args, **kwargs)
=================
17532929
count:1


class LazyButHonestDict(dict):
    """
    A dictionary that provides alternatives to :func:`get` and
    :func:`setdefault`, namely :func:`lazyget` and :func:`lazysetdefault`,
    that only evaluate their arguments if they have to.

    See
    https://stackoverflow.com/questions/17532929/how-to-implement-a-lazy-setdefault.

    Compared to the StackOverflow version: no obvious need to have a default
    returning ``None``, when we're implementing this as a special function.
    In contrast, helpful to have ``*args``/``**kwargs`` options.
    """  # noqa
    def lazyget(self, key: Hashable, thunk: Callable,
                *args: Any, **kwargs: Any) -> Any:
        if key in self:
            return self[key]
        else:
=================
1151658
count:1

# =============================================================================
# HashableDict
# =============================================================================

class HashableDict(dict):
    """
    A dictionary that can be hashed.

    See https://stackoverflow.com/questions/1151658/python-hashable-dicts.
    """
    def __hash__(self) -> int:
        return hash(tuple(sorted(self.items())))


# =============================================================================
# CaseInsensitiveDict
# =============================================================================

class CaseInsensitiveDict(dict):
=================
32888599
count:1


# =============================================================================
# CaseInsensitiveDict
# =============================================================================

class CaseInsensitiveDict(dict):
    """
    A case-insensitive dictionary, as per
    https://stackoverflow.com/questions/2082152/case-insensitive-dictionary/32888599#32888599,
    with updates for Python 3 and type hinting.
    
    See also
    
    - https://docs.python.org/3/tutorial/datastructures.html#dictionaries
    - https://docs.python.org/3/library/stdtypes.html#mapping-types-dict
    
    Test code:
    
    .. code-block:: python
=================
16041232
count:1

import os
from typing import Any, Iterable


# =============================================================================
# Making FileFields own their files (i.e. delete them afterwards)
# =============================================================================

# http://stackoverflow.com/questions/16041232/django-delete-filefield
# These two auto-delete files from filesystem when they are unneeded:
# ... with a bit of modification to make them generic (RNC)
# Attach them with signals; see e.g. Study model.
def auto_delete_files_on_instance_delete(instance: Any,
                                         fieldnames: Iterable[str]) -> None:
    """
    Deletes files from filesystem when object is deleted.
    """
    for fieldname in fieldnames:
        filefield = getattr(instance, fieldname, None)
=================
1156246
count:1
            If True, browsers will generally save to disk.
            If False, they may display it inline.
            http://www.w3.org/Protocols/rfc2616/rfc2616-sec19.html
        as_inline:
            attempt to force inline (only if not as_attachment)
        default_content_type:
            HTTP content type to use as default, if ``content_type`` is
            ``None``
    """
    # http://stackoverflow.com/questions/1156246/having-django-serve-downloadable-files  # noqa
    # https://docs.djangoproject.com/en/dev/ref/request-response/#telling-the-browser-to-treat-the-response-as-a-file-attachment  # noqa
    # https://djangosnippets.org/snippets/365/
    if offered_filename is None:
        offered_filename = os.path.basename(path_to_file) or ''
    if getattr(settings, "XSENDFILE", False):
        response = HttpResponse()
        response['X-Sendfile'] = smart_str(path_to_file)
        content_length = os.path.getsize(path_to_file)
    else:
        response = FileResponse(open(path_to_file, mode='rb'))
=================
4460661
count:1
        content_type=content_type,
        as_attachment=as_attachment,
        as_inline=as_inline,
        content_length=content_length,
        default_content_type=default_content_type)
    return response
    # Note for debugging: Chrome may request a file more than once (e.g. with a
    # GET request that's then marked 'canceled' in the Network tab of the
    # developer console); this is normal:
    #   http://stackoverflow.com/questions/4460661/what-to-do-with-chrome-sending-extra-requests  # noqa


def serve_buffer(
        data: bytes,
        offered_filename: str = None,
        content_type: str = None,
        as_attachment: bool = True,
        as_inline: bool = False,
        default_content_type: Optional[str] = MimeType.FORCE_DOWNLOAD) \
        -> HttpResponse:
=================
29303902
count:1
        return x
    except ValueError:
        raise forms.ValidationError(f"Not a valid NHS number: {x!r}")


class MultipleIntAreaField(forms.Field):
    """
    Django ``forms.Field`` to capture multiple integers.
    """
    # See also http://stackoverflow.com/questions/29303902/django-form-with-list-of-integers  # noqa
    widget = forms.Textarea

    def clean(self, value) -> List[int]:
        return [clean_int(x) for x in value.split()]


class MultipleNhsNumberAreaField(forms.Field):
    """
    Django ``forms.Field`` to capture multiple NHS numbers.
    """
=================
13990846
count:1
# noinspection PyUnresolvedReferences
from django.utils.html import escape
# noinspection PyUnresolvedReferences
from django.urls import reverse


# =============================================================================
# Disable boolean icons for a ModelAdmin field
# =============================================================================
# http://stackoverflow.com/questions/13990846/disable-on-off-icon-for-boolean-field-in-django  # noqa
# ... extended to use closures

def disable_bool_icon(
        fieldname: str,
        model) -> Callable[[Any], bool]:
    """
    Disable boolean icons for a Django ModelAdmin field.
    The '_meta' attribute is present on Django model classes and instances.

    model_class: ``Union[Model, Type[Model]]``
=================
2472422
count:1
        50MB - 5242880
        100MB - 104857600
        250MB - 214958080
        500MB - 429916160

    See:

    - https://djangosnippets.org/snippets/2206/
    - https://docs.djangoproject.com/en/1.8/ref/files/uploads/
    - https://stackoverflow.com/questions/2472422/django-file-upload-size-limit
    """
    def __init__(self, *args, **kwargs) -> None:
        self.content_types = kwargs.pop("content_types", None)
        if self.content_types is None:
            self.content_types = []
        self.max_upload_size = kwargs.pop("max_upload_size", None)
        super().__init__(*args, **kwargs)

    def clean(self, *args, **kwargs) -> Any:
        data = super().clean(*args, **kwargs)
=================
14368290
count:1
            2015-11-11 22:21:37.123

        The Django automatic RHS converter for datetime values looks like this:

        .. code-block:: none

            2015-11-11 22:21:37
            2015-11-11 22:21:37.123456

        ... http://stackoverflow.com/questions/14368290/django-datetimefield-and-timezone-now

        ... so a direct comparison with ``DATETIME`` works only if the
        microsecond component is zero (or you coerce it to zero via
        ``get_db_prep_value``), and a direct comparison to the ``STRFTIME``
        expression fails.

        Coercing the fractional seconds to zero via ``get_db_prep_value()``
        would make sub-second comparisons meaningless in the database. So we
        should avoid that, and operate as close to the database resolution as
        possible.
=================
6578986
count:1

- http://paltman.com/how-to-store-arbitrary-data-in-a-django-model/

- Native Django JSONField requires PostgreSQL, and is not part of the core set
  of fields:

  https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/fields/#django.contrib.postgres.fields.JSONField
  https://docs.djangoproject.com/en/1.10/ref/models/fields/

- http://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object
- http://stackoverflow.com/questions/31235771/is-parsing-a-json-naively-into-a-python-class-or-struct-secure
- http://stackoverflow.com/questions/16405969/how-to-change-json-encoding-behaviour-for-serializable-python-object/16406798#16406798
- http://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable

e.g.:

.. code-block:: python
    
    import inspect
    import json
=================
31235771
count:1
- http://paltman.com/how-to-store-arbitrary-data-in-a-django-model/

- Native Django JSONField requires PostgreSQL, and is not part of the core set
  of fields:

  https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/fields/#django.contrib.postgres.fields.JSONField
  https://docs.djangoproject.com/en/1.10/ref/models/fields/

- http://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object
- http://stackoverflow.com/questions/31235771/is-parsing-a-json-naively-into-a-python-class-or-struct-secure
- http://stackoverflow.com/questions/16405969/how-to-change-json-encoding-behaviour-for-serializable-python-object/16406798#16406798
- http://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable

e.g.:

.. code-block:: python
    
    import inspect
    import json
    from typing import Any, Dict, Union
=================
16406798
count:1

- Native Django JSONField requires PostgreSQL, and is not part of the core set
  of fields:

  https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/fields/#django.contrib.postgres.fields.JSONField
  https://docs.djangoproject.com/en/1.10/ref/models/fields/

- http://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object
- http://stackoverflow.com/questions/31235771/is-parsing-a-json-naively-into-a-python-class-or-struct-secure
- http://stackoverflow.com/questions/16405969/how-to-change-json-encoding-behaviour-for-serializable-python-object/16406798#16406798
- http://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable

e.g.:

.. code-block:: python
    
    import inspect
    import json
    from typing import Any, Dict, Union
    
=================
3768895
count:1
- Native Django JSONField requires PostgreSQL, and is not part of the core set
  of fields:

  https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/fields/#django.contrib.postgres.fields.JSONField
  https://docs.djangoproject.com/en/1.10/ref/models/fields/

- http://stackoverflow.com/questions/6578986/how-to-convert-json-data-into-a-python-object
- http://stackoverflow.com/questions/31235771/is-parsing-a-json-naively-into-a-python-class-or-struct-secure
- http://stackoverflow.com/questions/16405969/how-to-change-json-encoding-behaviour-for-serializable-python-object/16406798#16406798
- http://stackoverflow.com/questions/3768895/how-to-make-a-class-json-serializable

e.g.:

.. code-block:: python
    
    import inspect
    import json
    from typing import Any, Dict, Union
    
    class Thing(object):
=================
3151469
count:1
    See the License for the specific language governing permissions and
    limitations under the License.

===============================================================================

**Implement a request cache for Django.**

"""

# http://stackoverflow.com/questions/3151469/per-request-cache-in-django

from threading import currentThread

# noinspection PyUnresolvedReferences
from django.core.cache.backends.locmem import LocMemCache

_request_cache = {}
_installed_middleware = False


=================
3214589
count:1
#                 # (2) With 'next' parameter:
#                 path = request.get_full_path()
#                 return redirect_to_login(path, settings.LOGIN_URL,
#                                          REDIRECT_FIELD_NAME)


# -----------------------------------------------------------------------------
# 2. Alternative!
# -----------------------------------------------------------------------------
# http://stackoverflow.com/questions/3214589/

# class LoginRequiredMiddleware(object):
#     """
#     For an exempt view:
#         def someview(request, *args, **kwargs):
#             # body of view
#         someview.login_required = False
#
#         class SomeView(View):
#             login_required = False
=================
2095520
count:1
            return None  # OK, exempt
        fullpath = request.get_full_path()
        return redirect_to_login(fullpath, reverse(settings.LOGIN_VIEW_NAME),
                                 REDIRECT_FIELD_NAME)


# =============================================================================
# DisableClientSideCachingMiddleware
# =============================================================================
# http://stackoverflow.com/questions/2095520/fighting-client-side-caching-in-django  # noqa

class DisableClientSideCachingMiddleware(MiddlewareMixin):
    """
    Django middleware to ask the client never to cache headers for this page.
    """
    # noinspection PyUnusedLocal
    @staticmethod
    def process_response(request: HttpRequest,
                         response: HttpResponse) -> HttpResponse:
        add_never_cache_headers(response)
=================
1386291
count:1
    gitargs += [url, directory]
    run_func(gitargs)
    if commit:
        log.info("Resetting {} local Git repository to commit {}",
                 prettyname, commit)
        run_func([git,
                  "-C", directory,
                  "reset", "--hard", commit])
        # Using a Git repository that's not in the working directory:
        # https://stackoverflow.com/questions/1386291/git-git-dir-not-working-as-expected  # noqa
    return True


# def fix_git_repo_for_windows(directory: str):
#     # https://github.com/openssl/openssl/issues/174
#     log.info("Fixing repository {!r} for Windows line endings", directory)
#     with pushd(directory):
#         run([GIT, "config", "--local", "core.autocrlf", "false"])
#         run([GIT, "config", "--local", "core.eol", "lf"])
#         run([GIT, "rm", "--cached", "-r", "."])
=================
2082152
count:1


# =============================================================================
# Mapping terms via dictionaries
# =============================================================================

class CaseInsensitiveDict(dict):
    """
    Case-insensitive dictionary for strings; see
    https://stackoverflow.com/questions/2082152/case-insensitive-dictionary
    """
    def __setitem__(self, key: str, value: str) -> None:
        # https://docs.python.org/3/reference/datamodel.html#object.__setitem__
        super().__setitem__(key.lower(), value)

    def __contains__(self, key: str) -> bool:
        # https://docs.python.org/3/reference/datamodel.html#object.__contains__
        return super().__contains__(key.lower())

    def __getitem__(self, key: str) -> str:
=================
64505
count:1

    Returns:
         tuple: ``(success, error_or_success_message)``

    See

    - https://tools.ietf.org/html/rfc2822
    - https://tools.ietf.org/html/rfc5322
    - http://segfault.in/2010/12/sending-gmail-from-python/
    - http://stackoverflow.com/questions/64505
    - http://stackoverflow.com/questions/3362600

    Re security:

    - TLS supersedes SSL:
      https://en.wikipedia.org/wiki/Transport_Layer_Security
      
    - https://en.wikipedia.org/wiki/Email_encryption
    
    - SMTP connections on ports 25 and 587 are commonly secured via TLS using
=================
3362600
count:1
    Returns:
         tuple: ``(success, error_or_success_message)``

    See

    - https://tools.ietf.org/html/rfc2822
    - https://tools.ietf.org/html/rfc5322
    - http://segfault.in/2010/12/sending-gmail-from-python/
    - http://stackoverflow.com/questions/64505
    - http://stackoverflow.com/questions/3362600

    Re security:

    - TLS supersedes SSL:
      https://en.wikipedia.org/wiki/Transport_Layer_Security
      
    - https://en.wikipedia.org/wiki/Email_encryption
    
    - SMTP connections on ports 25 and 587 are commonly secured via TLS using
      the ``STARTTLS`` command:
=================
19237878
count:1

===============================================================================

**Helper functions for algorithmic definitions of treatment-resistant
depression.**

Performance notes:

- 200 test patients; baseline about 7.65-8.57 seconds (25 Hz).
- From https://stackoverflow.com/questions/19237878/ to
  https://stackoverflow.com/questions/17071871/select-rows-from-a-dataframe-based-on-values-in-a-column-in-pandas  # noqa
- Change from parallel to single-threading: down to 4.38 s (!).
- Avoid a couple of slices: down to 3.85 s for 200 patients.
- Add test patient E; up to 4.63 s for 250 patients (54 Hz).
- On a live set (different test computer), single-threaded: 901.9 s for 4154
  patients (4.6 Hz).
- One pointless indexing call removed: 863.2s for 4154 patients (4.8 Hz).
- Loop boundary tweak: 3.95 s for 300 test patients (76 Hz).
- From iloc to iat: 3.79s (79 Hz)
- These two are very helpful:
=================
17071871
count:1
===============================================================================

**Helper functions for algorithmic definitions of treatment-resistant
depression.**

Performance notes:

- 200 test patients; baseline about 7.65-8.57 seconds (25 Hz).
- From https://stackoverflow.com/questions/19237878/ to
  https://stackoverflow.com/questions/17071871/select-rows-from-a-dataframe-based-on-values-in-a-column-in-pandas  # noqa
- Change from parallel to single-threading: down to 4.38 s (!).
- Avoid a couple of slices: down to 3.85 s for 200 patients.
- Add test patient E; up to 4.63 s for 250 patients (54 Hz).
- On a live set (different test computer), single-threaded: 901.9 s for 4154
  patients (4.6 Hz).
- One pointless indexing call removed: 863.2s for 4154 patients (4.8 Hz).
- Loop boundary tweak: 3.95 s for 300 test patients (76 Hz).
- From iloc to iat: 3.79s (79 Hz)
- These two are very helpful:

=================
28757389
count:1
- Avoid a couple of slices: down to 3.85 s for 200 patients.
- Add test patient E; up to 4.63 s for 250 patients (54 Hz).
- On a live set (different test computer), single-threaded: 901.9 s for 4154
  patients (4.6 Hz).
- One pointless indexing call removed: 863.2s for 4154 patients (4.8 Hz).
- Loop boundary tweak: 3.95 s for 300 test patients (76 Hz).
- From iloc to iat: 3.79s (79 Hz)
- These two are very helpful:

  - https://stackoverflow.com/questions/28757389/loc-vs-iloc-vs-ix-vs-at-vs-iat
  - https://medium.com/dunder-data/selecting-subsets-of-data-in-pandas-39e811c81a0c
  
- Switching from tp.loc[conditions] to tp[conditions] didn't make much 
  difference, but the code is a bit cleaner
  
- Anyway, we should profile (see the PROFILE flag). That shows the main time
  is spent in my algorithmic code, not in DataFrame operations.
- Not creating unnecessary results DataFrame objects shaved things down from 
  5.7 to 3.9 s in the profiler.
- Still slower in parallel. Time is spent in thread locking.
=================
30086936
count:1
    main_only_quicksetup_rootlogger,
)
from cardinal_pythonlib.psychiatry.rfunc import flush_stdout_stderr

log = BraceStyleAdapter(logging.getLogger(__name__))

DTYPE_STRING = "<U255"
# ... getting this right is surprisingly tricky!
# ... https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.dtypes.html
# ... https://stackoverflow.com/questions/30086936/what-is-the-difference-between-the-types-type-numpy-string-and-type-str  # noqa
# ... https://stackoverflow.com/questions/49127844/python-convert-python-string-to-numpy-unicode-string  # noqa
DTYPE_DATE = "datetime64[D]"  # D for day resolution, ns for nanoseconds, etc.
# ... https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html

DEFAULT_SOURCE_PATIENT_COLNAME = "patient_id"
DEFAULT_SOURCE_DRUG_COLNAME = "drug"
DEFAULT_SOURCE_DATE_COLNAME = "date"

DEFAULT_ANTIDEPRESSANT_COURSE_LENGTH_DAYS = 28
DEFAULT_EXPECT_RESPONSE_BY_DAYS = 56
=================
49127844
count:1
)
from cardinal_pythonlib.psychiatry.rfunc import flush_stdout_stderr

log = BraceStyleAdapter(logging.getLogger(__name__))

DTYPE_STRING = "<U255"
# ... getting this right is surprisingly tricky!
# ... https://docs.scipy.org/doc/numpy-1.13.0/reference/arrays.dtypes.html
# ... https://stackoverflow.com/questions/30086936/what-is-the-difference-between-the-types-type-numpy-string-and-type-str  # noqa
# ... https://stackoverflow.com/questions/49127844/python-convert-python-string-to-numpy-unicode-string  # noqa
DTYPE_DATE = "datetime64[D]"  # D for day resolution, ns for nanoseconds, etc.
# ... https://docs.scipy.org/doc/numpy/reference/arrays.datetime.html

DEFAULT_SOURCE_PATIENT_COLNAME = "patient_id"
DEFAULT_SOURCE_DRUG_COLNAME = "drug"
DEFAULT_SOURCE_DATE_COLNAME = "date"

DEFAULT_ANTIDEPRESSANT_COURSE_LENGTH_DAYS = 28
DEFAULT_EXPECT_RESPONSE_BY_DAYS = 56
DEFAULT_SYMPTOM_ASSESSMENT_TIME_DAYS = 180
=================
15943769
count:1
    # Sort by date, then drug.
    # ... arbitrary drug name order to make the output stable
    # -------------------------------------------------------------------------
    # ... this is about 2ms for small lists; probably not limiting
    # ... seems slower if "inplace=True" is used.
    tp = tp.sort_values(by=[date_colname, drug_colname], ascending=True)

    # log.critical("{!r}", tp)

    nrows_all = len(tp)  # https://stackoverflow.com/questions/15943769/
    if nrows_all < 4:  # need A, A, B, B; so minimum #rows is 4
        return None
    end_date = tp.iat[nrows_all - 1, sourcecolnum_date]  # date of last row

    # -------------------------------------------------------------------------
    # Get antidepressants, in the order they appear
    # -------------------------------------------------------------------------
    for first_b_rownum in range(1, nrows_all):
        # ... skip rows 0 and 1, because a drug can't be the second (B) drug
        #     unless there are two mentions of A beforehand.
=================
19365513
count:1
            found_valid_a = True
            break
        if not found_valid_a:
            continue  # try another B

        # ---------------------------------------------------------------------
        # OK; here we have found a combination that we like.
        # Add it to the results.
        # ---------------------------------------------------------------------
        # https://stackoverflow.com/questions/19365513/how-to-add-an-extra-row-to-a-pandas-dataframe/19368360  # noqa
        # http://pandas.pydata.org/pandas-docs/stable/indexing.html#setting-with-enlargement  # noqa

        expect_response_by_date = (
            antidepressant_b_first_mention + timedelta_days(
                expect_response_by_days)
        )
        end_of_symptom_period = (
            antidepressant_b_first_mention + timedelta_days(
                expect_response_by_days + symptom_assessment_time_days - 1)
        )
=================
20094215
count:1
# =============================================================================
# Argparse actions
# =============================================================================

class ShowAllSubparserHelpAction(_HelpAction):
    """
    Class to serve as the ``action`` for an ``argparse`` top-level parser that
    shows help for all subparsers. As per

    https://stackoverflow.com/questions/20094215/argparse-subparser-monolithic-help-output
    """  # noqa

    def __call__(self,
                 parser: ArgumentParser,
                 namespace: Namespace,
                 values: List[Any],  # ?
                 option_string: str = None) -> None:
        # 1. Print top-level help
        parser.print_help()
        sep = "=" * 79  # "-" less helpful when using grep for "--option"!
=================
15008758
count:1
    
    .. code-block:: none
    
        argument strings                value
        ------------------------------- -----
        'yes', 'true', 't', 'y', '1'    True
        'no', 'false', 'f', 'n', '0'    False
     
    From
    https://stackoverflow.com/questions/15008758/parsing-boolean-values-with-argparse

    Specimen usage:
    
    .. code-block:: python
    
        parser.add_argument(
            "--nice", type=str2bool, nargs='?',
            const=True,  # if --nice is present with no parameter
            default=NICE,  # if the argument is entirely absent
            help="Activate nice mode.")
=================
6557407
count:1

    This should avoid the error:
    
    .. code-block:: none

        TypeError: metaclass conflict: the metaclass of a derived class must
        be a (non-strict) subclass of the metaclasses of all its bases

    Code from:
    https://stackoverflow.com/questions/6557407/triple-inheritance-causes-metaclass-conflict-sometimes.

    See also:
    http://code.activestate.com/recipes/204197-solving-the-metaclass-conflict/.

    HOWEVER, it's not actually working. Does Python 3 have stricter checking
    than Python 2?

    See also
    https://blog.ionelmc.ro/2015/02/09/understanding-python-metaclasses/.
    """  # noqa
=================
201282
count:1
    def get_all_table_names(cls, db: DATABASE_SUPPORTER_FWD_REF) -> List[str]:
        return db.fetchallfirstvalues("""
            SELECT MSysObjects.Name AS table_name
            FROM MSysObjects
            WHERE (((Left([Name],1))<>"~")
                    AND ((Left([Name],4))<>"MSys")
                    AND ((MSysObjects.Type) In (1,4,6)))
            ORDER BY MSysObjects.Name
        """)
        # http://stackoverflow.com/questions/201282

    @classmethod
    def get_all_table_details(cls, db: DATABASE_SUPPORTER_FWD_REF) \
            -> List[List[Any]]:
        # returns some not-very-helpful stuff too!
        # noinspection PyTypeChecker
        return db.fetchall("""
            SELECT *
            FROM MSysObjects
            WHERE (((Left([Name],1))<>"~")
=================
2221250
count:1
                       db: DATABASE_SUPPORTER_FWD_REF,
                       table: str) -> List[List[Any]]:
        raise RuntimeError("Don't know how to describe table in Access")

    @classmethod
    def fetch_column_names(cls,
                           db: DATABASE_SUPPORTER_FWD_REF,
                           table: str) -> List[str]:
        # not possible in SQL:
        #   http://stackoverflow.com/questions/2221250
        # can do this:
        #   http://stackoverflow.com/questions/3343922/get-column-names
        # or can use pyodbc:
        db.ensure_db_open()
        cursor = db.db.cursor()
        sql = "SELECT TOP 1 * FROM " + db.delimit(table)
        debug_sql(sql)
        cursor.execute(sql)
        return [x[0] for x in cursor.variables]
        # https://code.google.com/p/pyodbc/wiki/Cursor
=================
3343922
count:1
        raise RuntimeError("Don't know how to describe table in Access")

    @classmethod
    def fetch_column_names(cls,
                           db: DATABASE_SUPPORTER_FWD_REF,
                           table: str) -> List[str]:
        # not possible in SQL:
        #   http://stackoverflow.com/questions/2221250
        # can do this:
        #   http://stackoverflow.com/questions/3343922/get-column-names
        # or can use pyodbc:
        db.ensure_db_open()
        cursor = db.db.cursor()
        sql = "SELECT TOP 1 * FROM " + db.delimit(table)
        debug_sql(sql)
        cursor.execute(sql)
        return [x[0] for x in cursor.variables]
        # https://code.google.com/p/pyodbc/wiki/Cursor

    @classmethod
=================
6568098
count:1
            "SELECT table_name FROM information_schema.tables")

    @classmethod
    def get_all_table_details(cls, db: DATABASE_SUPPORTER_FWD_REF) \
            -> List[List[Any]]:
        # noinspection PyTypeChecker
        return db.fetchall("SELECT * FROM information_schema.tables")
        # restricted to current database (in full:
        #   databasename.information_schema.tables)
        # http://stackoverflow.com/questions/6568098

    @classmethod
    def describe_table(cls,
                       db: DATABASE_SUPPORTER_FWD_REF,
                       table: str) -> List[List[Any]]:
        # noinspection PyTypeChecker
        return db.fetchall(
            "SELECT * FROM information_schema.columns "
            "WHERE table_name=?", table)

=================
917431
count:1

    @classmethod
    def get_datatype(cls,
                     db: DATABASE_SUPPORTER_FWD_REF,
                     table: str,
                     column: str) -> str:
        # ISO standard for INFORMATION_SCHEMA, I think.
        # SQL Server carries a warning but the warning may be incorrect:
        # https://msdn.microsoft.com/en-us/library/ms188348.aspx
        # http://stackoverflow.com/questions/917431
        # http://sqlblog.com/blogs/aaron_bertrand/archive/2011/11/03/the-case-against-information-schema-views.aspx  # noqa
        return db.fetchvalue(
            "SELECT data_type FROM information_schema.columns "
            "WHERE table_schema=? AND table_name=? AND column_name=?",
            db.schema, table, column)

    @classmethod
    def get_column_type(cls,
                        db: DATABASE_SUPPORTER_FWD_REF,
                        table: str,
=================
917431
count:1

    @classmethod
    def get_column_type(cls,
                        db: DATABASE_SUPPORTER_FWD_REF,
                        table: str,
                        column: str) -> str:
        # ISO standard for INFORMATION_SCHEMA, I think.
        # SQL Server carries a warning but the warning may be incorrect:
        # https://msdn.microsoft.com/en-us/library/ms188348.aspx
        # http://stackoverflow.com/questions/917431
        # http://sqlblog.com/blogs/aaron_bertrand/archive/2011/11/03/the-case-against-information-schema-views.aspx  # noqa
        sql = """
            SELECT {}
            FROM information_schema.columns
            WHERE table_schema=? AND table_name=? AND column_name=?
        """.format(cls.column_type_expr())
        return db.fetchvalue(sql, db.schema, table, column)


# =============================================================================
=================
4205181
count:1
        ")"
    )


def get_sql_insert_or_update(table: str,
                             fieldlist: Sequence[str],
                             delims: Tuple[str, str] = ("", "")) -> str:
    """Returns ?-marked SQL for an INSERT-or-if-duplicate-key-UPDATE statement.
    """
    # http://stackoverflow.com/questions/4205181
    return """
        INSERT INTO {table} ({fields})
        VALUES ({placeholders})
        ON DUPLICATE KEY UPDATE {updatelist}
    """.format(
        table=delimit(table, delims),
        fields=",".join([delimit(x, delims) for x in fieldlist]),
        placeholders=",".join(["?"] * len(fieldlist)),
        updatelist=",".join(
            ["{field}=VALUES({field})".format(field=delimit(x, delims))
=================
10263956
count:1
    return s.replace("''", "'")


def datetime2literal_rnc(d: datetime.datetime, c: Optional[Dict]) -> str:
    """Format a DateTime object as something MySQL will actually accept."""
    # dt = d.strftime("%Y-%m-%d %H:%M:%S")
    # ... can fail with e.g.
    #   ValueError: year=1850 is before 1900; the datetime strftime() methods
    #   require year >= 1900
    # http://stackoverflow.com/questions/10263956
    dt = d.isoformat(" ")
    # noinspection PyArgumentList,PyUnresolvedReferences
    return _mysql.string_literal(dt, c)


def full_datatype_to_mysql(d: str) -> str:
    """Converts a full datatype, e.g. INT, VARCHAR(10), VARCHAR(MAX), to a
    MySQL equivalent."""
    d = d.upper()
    (s, length) = split_long_sqltype(d)
=================
5088671
count:1

# =============================================================================
# Reconfiguring jaydebeapi to do sensible type conversions
# =============================================================================
# rs: resultset
# col: column

def _convert_java_binary(rs, col: int) -> Optional[bytes]:
    # https://github.com/originell/jpype/issues/71
    # http://stackoverflow.com/questions/5088671
    # https://github.com/baztian/jaydebeapi/blob/master/jaydebeapi/__init__.py
    # https://msdn.microsoft.com/en-us/library/ms378813(v=sql.110).aspx
    # http://stackoverflow.com/questions/2920364/checking-for-a-null-int-value-from-a-java-resultset  # noqa
    v = None
    log.debug("_convert_java_binary: converting...")
    time1 = time.time()
    try:
        # ---------------------------------------------------------------------
        # Method 1: 3578880 bytes in 21.7430660725 seconds =   165 kB/s
        # ---------------------------------------------------------------------
=================
2920364
count:1
# =============================================================================
# rs: resultset
# col: column

def _convert_java_binary(rs, col: int) -> Optional[bytes]:
    # https://github.com/originell/jpype/issues/71
    # http://stackoverflow.com/questions/5088671
    # https://github.com/baztian/jaydebeapi/blob/master/jaydebeapi/__init__.py
    # https://msdn.microsoft.com/en-us/library/ms378813(v=sql.110).aspx
    # http://stackoverflow.com/questions/2920364/checking-for-a-null-int-value-from-a-java-resultset  # noqa
    v = None
    log.debug("_convert_java_binary: converting...")
    time1 = time.time()
    try:
        # ---------------------------------------------------------------------
        # Method 1: 3578880 bytes in 21.7430660725 seconds =   165 kB/s
        # ---------------------------------------------------------------------
        # java_val = rs.getObject(col)
        # if java_val is None:
        #     return
=================
26899595
count:1

def _convert_java_bigstring(rs, col: int) -> Optional[str]:
    v = str(rs.getCharacterStream(col))
    if rs.wasNull():
        return None
    return v


def _convert_java_bigint(rs, col: int) -> Optional[int]:
    # http://stackoverflow.com/questions/26899595
    # https://github.com/baztian/jaydebeapi/issues/6
    # https://github.com/baztian/jaydebeapi/blob/master/jaydebeapi/__init__.py
    # https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html
    # http://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html
    java_val = rs.getObject(col)
    if java_val is None:
        return None
    v = getattr(java_val, 'toString')()  # Java call: java_val.toString()
    return int(v)

=================
6777810
count:1
    # The types used as keys below MUST be in java.sql.Types -- search for
    # _init_types() calls in jaydebeapi's __init__.py. If not, this bit
    # crashes:
    #       for i in _DEFAULT_CONVERTERS:
    #           const_val = types_map[i]
    # Those types are:
    #       http://docs.oracle.com/javase/6/docs/api/java/sql/Types.html
    # In particular, note that DATETIME is not one of them!
    # The equivalent is TIMESTAMP.
    #       http://stackoverflow.com/questions/6777810
    try:
        if hasattr(jaydebeapi, "_DEFAULT_CONVERTERS"):
            # Recent version of jaydebeapi, e.g. 0.2.0
            # noinspection PyProtectedMember
            converters = jaydebeapi._DEFAULT_CONVERTERS
        else:
            # Older version, e.g. prior to 0.2.0
            log.warning("Old jaydebeapi version")
            # noinspection PyUnresolvedReferences,PyProtectedMember
            converters = jaydebeapi.dbapi2._DEFAULT_CONVERTERS
=================
2901453
count:1
class DatabaseSupporter:
    """Support class for databases using pyodbc or MySQLdb."""

    def __init__(self):
        self.db = None
        self.flavour = None
        self.db_pythonlib = None
        self.schema = None
        self.autocommit = None
        # http://stackoverflow.com/questions/2901453
        # http://stackoverflow.com/questions/7311990

    # -------------------------------------------------------------------------
    # Generic connection method
    # -------------------------------------------------------------------------

    @staticmethod
    def reraise_connection_exception(e: Exception) -> None:
        err = "Failed to connect. {ex}: {msg}".format(
            ex=type(e).__name__,
=================
7311990
count:1
    """Support class for databases using pyodbc or MySQLdb."""

    def __init__(self):
        self.db = None
        self.flavour = None
        self.db_pythonlib = None
        self.schema = None
        self.autocommit = None
        # http://stackoverflow.com/questions/2901453
        # http://stackoverflow.com/questions/7311990

    # -------------------------------------------------------------------------
    # Generic connection method
    # -------------------------------------------------------------------------

    @staticmethod
    def reraise_connection_exception(e: Exception) -> None:
        err = "Failed to connect. {ex}: {msg}".format(
            ex=type(e).__name__,
            msg=str(e),
=================
11053941
count:1
            # stops producing e.g.
            #   '2014-01-03 18:15:51'
            # and starts producing e.g.
            #   '2014-01-03 18:15:51.842097+00:00'.
            # Let's fix that...
            datetimetype = datetime.datetime  # as per MySQLdb times.py
            converters = mysql.converters.conversions.copy()
            converters[datetimetype] = datetime2literal_rnc
            # See also:
            #   http://stackoverflow.com/questions/11053941
            log.info(
                "{i} connect: host={h}, port={p}, user={u}, "
                "database={d}".format(
                    i=interface, h=host, p=port, u=user, d=database))
            self.db = mysql.connect(
                host=host,
                port=port,
                user=user,
                passwd=password,
                db=database,
=================
6001104
count:1
            # What is my database using?
            # ... SHOW VARIABLES LIKE 'character_set_%';
            # Change a database character set:
            # ... ALTER DATABASE mydatabasename charset=utf8;
            # http://docs.moodle.org/23/en/
            #        Converting_your_MySQL_database_to_UTF8
            #
            # Python talking to MySQL in Unicode:
            # http://www.harelmalka.com/?p=81
            # http://stackoverflow.com/questions/6001104

        elif engine == ENGINE_MYSQL and interface == INTERFACE_ODBC:
            log.info(
                "ODBC connect: DRIVER={dr};SERVER={s};PORT={p};"
                "DATABASE={db};USER={u};PASSWORD=[censored]".format(
                    dr=driver, s=host, p=port,
                    db=database, u=user))
            dsn = (
                "DRIVER={0};SERVER={1};PORT={2};DATABASE={3};"
                "USER={4};PASSWORD={5}".format(driver, host, port, database,
=================
1063770
count:1
                    db=database, u=user))
            dsn = (
                "DRIVER={0};SERVER={1};PORT={2};DATABASE={3};"
                "USER={4};PASSWORD={5}".format(driver, host, port, database,
                                               user, password)
            )
            # noinspection PyUnresolvedReferences
            self.db = pyodbc.connect(dsn)
            self.db.autocommit = autocommit
            # http://stackoverflow.com/questions/1063770

        elif engine == ENGINE_MYSQL and interface == INTERFACE_JDBC:
            # https://help.ubuntu.com/community/JDBCAndMySQL
            # https://github.com/baztian/jaydebeapi/issues/1
            jclassname = "com.mysql.jdbc.Driver"
            url = "jdbc:mysql://{host}:{port}/{database}".format(
                host=host, port=port, database=database)
            driver_args = [url, user, password]
            jars = None
            libs = None
=================
1063770
count:1
                    "UID={u};PWD=[censored]".format(
                        dr=driver, s=host, db=database, u=user))
                connectstring = (
                    "DRIVER={};SERVER={};DATABASE={};UID={};PWD={}".format(
                        driver, host, database, user, password)
                )
            # noinspection PyUnresolvedReferences
            self.db = pyodbc.connect(connectstring, unicode_results=True)
            self.db.autocommit = autocommit
            # http://stackoverflow.com/questions/1063770

        elif engine == ENGINE_SQLSERVER and interface == INTERFACE_JDBC:
            # jar tvf sqljdbc41.jar
            # https://msdn.microsoft.com/en-us/sqlserver/aa937724.aspx
            # https://msdn.microsoft.com/en-us/library/ms378428(v=sql.110).aspx
            # https://msdn.microsoft.com/en-us/library/ms378988(v=sql.110).aspx
            jclassname = 'com.microsoft.sqlserver.jdbc.SQLServerDriver'
            urlstem = 'jdbc:sqlserver://{host}:{port};'.format(
                host=host,
                port=port
=================
1063770
count:1
            libs = None
            self._jdbc_connect(jclassname, driver_args, jars, libs, autocommit)

        elif engine == ENGINE_ACCESS and interface == INTERFACE_ODBC:
            dsn = "DSN={}".format(dsn)
            log.info("ODBC connect: DSN={}", dsn)
            # noinspection PyUnresolvedReferences
            self.db = pyodbc.connect(dsn)
            self.db.autocommit = autocommit
            # http://stackoverflow.com/questions/1063770

        else:
            raise ValueError(
                "Unknown 'engine'/'interface' combination: {}/{}".format(
                    engine, interface
                )
            )

        return True

=================
9337134
count:1

        For example, MySQLdb uses %s rather than ?.
        """
        # pyodbc seems happy with ? now (pyodbc.paramstyle is 'qmark');
        # using ? is much simpler, because we may want to use % with LIKE
        # fields or (in my case) with date formatting strings for
        # STR_TO_DATE().
        # If you get this wrong, you may see "not all arguments converted
        # during string formatting";
        # http://stackoverflow.com/questions/9337134
        if self.db_pythonlib in [PYTHONLIB_PYMYSQL, PYTHONLIB_MYSQLDB]:
            # These engines use %, so we need to convert ? to %, without
            # breaking literal % values.
            sql = _PERCENT_REGEX.sub("%%", sql)
            # ... replace all % with %% first
            sql = _QUERY_VALUE_REGEX.sub("%s", sql)
            # ... replace all ? with %s in the SQL
        # Otherwise: engine uses ?, so we don't have to fiddle.
        return sql

=================
6202726
count:1
    def get_literal_sql_with_arguments(self, query: str, *args) -> str:
        query = self.localize_sql(query)
        # Now into the back end:
        # See cursors.py, connections.py in MySQLdb source.

        # charset = self.db.character_set_name()
        # if isinstance(query, unicode):
        #     query = query.encode(charset)
        # Don't get them double-encoded:
        #   http://stackoverflow.com/questions/6202726/writing-utf-8-string-to-mysql-with-python  # noqa
        if args is not None:
            query = query % self.db.literal(args)
        return query

    def fetchvalue(self, sql: str, *args) -> Optional[Any]:
        """Executes SQL; returns the first value of the first row, or None."""
        row = self.fetchone(sql, *args)
        if row is None:
            return None
        return row[0]
=================
8859353
count:1
        """.format(self.get_current_schema_expr())
        # http://forums.mysql.com/read.php?10,114742,114748#msg-114748
        row = self.fetchone(sql, table)
        has_pk_already = True if row[0] >= 1 else False
        drop_pk_if_exists = " DROP PRIMARY KEY," if has_pk_already else ""
        fieldlist = ",".join([self.delimit(f) for f in fieldnames])
        sql = ("ALTER TABLE " + self.delimit(table) +
               drop_pk_if_exists +
               " ADD PRIMARY KEY(" + fieldlist + ")")
        # http://stackoverflow.com/questions/8859353
        return self.db_exec(sql)

    # =========================================================================
    # Flavours
    # =========================================================================

    def get_flavour(self) -> Optional[str]:
        if not self.flavour:
            return None
        return self.flavour.flavour()
=================
1903041
count:1
        """Does the user have read-only access to the database?
        This is a safety check, but should NOT be the only safety check!"""
        return self.flavour.is_read_only(self, logger=log)

    # =========================================================================
    # Debugging
    # =========================================================================

    def java_garbage_collect(self) -> None:
        # http://stackoverflow.com/questions/1903041
        # http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html
        if not jaydebeapi:
            return
        if self.db_pythonlib != PYTHONLIB_JAYDEBEAPI:
            return
        log.info("Calling Java garbage collector...")
        # noinspection PyUnresolvedReferences
        rt = jpype.java.lang.Runtime.getRuntime()
        rt.gc()
=================
8562136
count:1
    WITH,
)

log = get_brace_style_log_with_null_handler(__name__)


# Not in SQL Server (though in MySQL):
#
# don't think so: BINARY; http://gilfster.blogspot.co.uk/2005/08/case-sensitivity-in-mysql.html  # noqa
# DISTINCTROW: no; http://stackoverflow.com/questions/8562136/distinctrow-equivalent-in-sql-server  # noqa
# DIV/MOD: not in SQL Server; use / and % respectively; https://msdn.microsoft.com/en-us/library/ms190279.aspx  # noqa
# PARTITION: not in SELECT? - https://msdn.microsoft.com/en-us/library/ms187802.aspx  # noqa
# XOR: use ^ instead; http://stackoverflow.com/questions/5411619/t-sql-xor-operator  # noqa

# Definitely part of SQL Server:
CHECKSUM_AGG = sql_keyword("CHECKSUM_AGG")
COUNT_BIG = sql_keyword("COUNT_BIG")
GROUPING = sql_keyword("GROUPING")
GROUPING_ID = sql_keyword("GROUPING_ID")
ROLLUP = sql_keyword("ROLLUP")
=================
5411619
count:1
log = get_brace_style_log_with_null_handler(__name__)


# Not in SQL Server (though in MySQL):
#
# don't think so: BINARY; http://gilfster.blogspot.co.uk/2005/08/case-sensitivity-in-mysql.html  # noqa
# DISTINCTROW: no; http://stackoverflow.com/questions/8562136/distinctrow-equivalent-in-sql-server  # noqa
# DIV/MOD: not in SQL Server; use / and % respectively; https://msdn.microsoft.com/en-us/library/ms190279.aspx  # noqa
# PARTITION: not in SELECT? - https://msdn.microsoft.com/en-us/library/ms187802.aspx  # noqa
# XOR: use ^ instead; http://stackoverflow.com/questions/5411619/t-sql-xor-operator  # noqa

# Definitely part of SQL Server:
CHECKSUM_AGG = sql_keyword("CHECKSUM_AGG")
COUNT_BIG = sql_keyword("COUNT_BIG")
GROUPING = sql_keyword("GROUPING")
GROUPING_ID = sql_keyword("GROUPING_ID")
ROLLUP = sql_keyword("ROLLUP")
SOUNDEX = sql_keyword("SOUNDEX")
STDEV = sql_keyword("STDEV")
STDEV_P = sql_keyword("STDEV_P")
=================
285775
count:1
    column_spec = (
        Combine(database_name + '.' + schema_name + '.' + table_name + '.' +
                column_name + no_dot) |
        Combine(schema_name + '.' + table_name + '.' + column_name + no_dot) |
        Combine(table_name + '.' + column_name + no_dot) |
        column_name + no_dot
    ).setName("column_spec")
    # I'm unsure if SQL Server allows keywords in the parts after dots, like
    # MySQL does.
    # - http://stackoverflow.com/questions/285775/how-to-deal-with-sql-column-names-that-look-like-sql-keywords  # noqa

    bind_parameter = Literal('?')

    variable = Regex(r"@[a-zA-Z0-9\.$_]+").setName("variable")

    argument_list = (
        delimitedList(expr).setName("arglist").setParseAction(', '.join)
    )
    function_call = Combine(function_name + LPAR) + argument_list + RPAR

=================
11016935
count:1

    variable = Regex(r"@[a-zA-Z0-9\.$_]+").setName("variable")

    argument_list = (
        delimitedList(expr).setName("arglist").setParseAction(', '.join)
    )
    function_call = Combine(function_name + LPAR) + argument_list + RPAR

    # Not supported: index hints
    # ... http://stackoverflow.com/questions/11016935/how-can-i-force-a-query-to-not-use-a-index-on-a-given-table  # noqa

    # -----------------------------------------------------------------------------
    # CASE
    # -----------------------------------------------------------------------------
    case_expr = (
        (
            CASE + expr +
            OneOrMore(WHEN + expr + THEN + expr) +
            Optional(ELSE + expr) +
            END
=================
1345039
count:1
  
    http://pyparsing.wikispaces.com/share/view/11262229

  - Match-first (|) versus match-longest (^):
  
    http://pyparsing.wikispaces.com/HowToUsePyparsing

  - How to do arithmetic recursive parsing:
  
    http://stackoverflow.com/questions/1345039

  - Somebody else's MySQL parser:
  
    https://github.com/gburns/mysql_pyparsing/blob/master/src/sqlparser.py

  - ... or generic SQL:
  
    http://pyparsing.wikispaces.com/file/view/select_parser.py/158651233/select_parser.py

ANSI SQL syntax:
=================
37926516
count:1
# pyparsing helpers
# =============================================================================

def delim_list(expr_: Token,
               delim: str = ",",
               combine: bool = False,
               combine_adjacent: bool = False,
               suppress_delim: bool = False):
    # A better version of delimitedList
    # BUT SEE ALSO ALTERNATIVE: http://stackoverflow.com/questions/37926516
    name = str(expr_) + " [" + str(delim) + " " + str(expr_) + "]..."
    if combine:
        return Combine(expr_ + ZeroOrMore(delim + expr_),
                       adjacent=combine_adjacent).setName(name)
    else:
        if suppress_delim:
            return (expr_ + ZeroOrMore(Suppress(delim) + expr_)).setName(name)
        else:
            return (expr_ + ZeroOrMore(delim + expr_)).setName(name)

=================
4214173
count:1
    else:
        if suppress_delim:
            return (expr_ + ZeroOrMore(Suppress(delim) + expr_)).setName(name)
        else:
            return (expr_ + ZeroOrMore(delim + expr_)).setName(name)


WORD_BOUNDARY = r"\b"
# The meaning of \b:
# http://stackoverflow.com/questions/4213800/is-there-something-like-a-counter-variable-in-regular-expression-replace/4214173#4214173  # noqa


def word_regex_element(word: str) -> str:
    return WORD_BOUNDARY + word + WORD_BOUNDARY


def multiple_words_regex_element(
        words_as_string_or_list: Union[str, List[str]]) -> str:
    if isinstance(words_as_string_or_list, list):
        wordlist = words_as_string_or_list
=================
37926516
count:1

    # http://dev.mysql.com/doc/refman/5.7/en/user-variables.html
    variable = Regex(r"@[a-zA-Z0-9\.$_]+").setName("variable")

    # http://dev.mysql.com/doc/refman/5.7/en/functions.html
    argument_list = (
        delimitedList(expr).setName("arglist").setParseAction(', '.join)
    )
    # ... we don't care about sub-parsing the argument list, so use combine=True
    # or setParseAction: http://stackoverflow.com/questions/37926516
    function_call = Combine(function_name + LPAR) + argument_list + RPAR

    # http://dev.mysql.com/doc/refman/5.7/en/partitioning-selection.html
    partition_list = (
        LPAR + delim_list(partition_name, combine=True) + RPAR
    ).setName("partition_list")

    # http://dev.mysql.com/doc/refman/5.7/en/index-hints.html
    index_list = delim_list(index_name, combine=False)
    # ... see pyparsing_bugtest_delimited_list_combine
=================
5599254
count:1
# -- Options for todo extension ----------------------------------------------

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = True


# -- Options for autodoc extension -------------------------------------------

autoclass_content = 'both'
# https://stackoverflow.com/questions/5599254/how-to-use-sphinxs-autodoc-to-document-a-classs-init-self-method  # noqa


# =============================================================================
# For Django
# =============================================================================
# https://stackoverflow.com/questions/36228537/django-settings-module-not-defined-when-building-sphinx-documentation

# But in practice:
if django:
    settings.configure()
=================
36228537
count:1
# -- Options for autodoc extension -------------------------------------------

autoclass_content = 'both'
# https://stackoverflow.com/questions/5599254/how-to-use-sphinxs-autodoc-to-document-a-classs-init-self-method  # noqa


# =============================================================================
# For Django
# =============================================================================
# https://stackoverflow.com/questions/36228537/django-settings-module-not-defined-when-building-sphinx-documentation

# But in practice:
if django:
    settings.configure()
    django.setup()

